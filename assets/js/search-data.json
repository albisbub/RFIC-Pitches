{
  
    
        "post0": {
            "title": "RFIC MEETING 7",
            "content": ". Subjet Company Financials . Income Statement . row name Year Revenue Revenue Growth Cost of Revenue Gross Profit R&amp;D Expenses SG&amp;A Expense Operating Expenses Operating Income Interest Expense Earnings before Tax Income Tax Expense Net Income - Non-Controlling int Net Income - Discontinued ops Net Income Preferred Dividends Net Income Com EPS EPS Diluted Weighted Average Shs Out Weighted Average Shs Out (Dil) Dividend per Share Gross Margin EBITDA Margin EBIT Margin Profit Margin Free Cash Flow margin EBITDA EBIT Consolidated Income Earnings Before Tax Margin Net Profit Margin . 0 2019-12-31 | 8.781000e+09 | 0.062561 | 0.000000e+00 | 8.781000e+09 | 0.0 | 2.370000e+09 | 7.718000e+09 | 1.063000e+09 | 78000000.0 | 1.016000e+09 | 247000000.0 | 0.0 | 0.0 | 7.690000e+08 | 0.0 | 7.690000e+08 | 6.240 | 6.19 | 123279000.0 | 124289000.0 | 1.391917 | 1.000000 | 0.169229 | 0.121057 | 0.087575 | 0.116843 | 1.486000e+09 | 1.063000e+09 | 7.690000e+08 | 0.115704 | 0.087575 | . 1 2018-12-31 | 8.264000e+09 | 0.041724 | 0.000000e+00 | 8.264000e+09 | 0.0 | 2.190000e+09 | 7.621000e+09 | 6.430000e+08 | 91000000.0 | 5.850000e+08 | 148000000.0 | 0.0 | 0.0 | 4.370000e+08 | 0.0 | 4.370000e+08 | 3.550 | 3.52 | 123230000.0 | 123975000.0 | 1.274450 | 1.000000 | 0.125968 | 0.077807 | 0.052880 | 0.028437 | 1.041000e+09 | 6.430000e+08 | 4.370000e+08 | 0.070789 | 0.052880 | . 2 2017-12-31 | 7.933000e+09 | 0.337548 | 1.950000e+08 | 7.738000e+09 | 0.0 | 1.924000e+09 | 6.673000e+09 | 1.260000e+09 | 103000000.0 | 1.207000e+09 | 173000000.0 | 0.0 | 0.0 | 1.034000e+09 | 0.0 | 1.034000e+09 | 8.390 | 8.35 | 123211000.0 | 123854000.0 | 1.194955 | 0.975419 | 0.205723 | 0.158830 | 0.130342 | 0.071095 | 1.632000e+09 | 1.260000e+09 | 1.034000e+09 | 0.152149 | 0.130342 | . 3 2016-12-31 | 5.931000e+09 | 0.059486 | 1.260000e+08 | 5.805000e+09 | 0.0 | 1.382000e+09 | 4.582000e+09 | 1.349000e+09 | 55000000.0 | 1.345000e+09 | 531000000.0 | 0.0 | 0.0 | 8.140000e+08 | 0.0 | 8.140000e+08 | 6.590 | 6.54 | 123557000.0 | 124389000.0 | 1.093344 | 0.978756 | 0.288653 | 0.227449 | 0.137245 | 0.119373 | 1.712000e+09 | 1.349000e+09 | 8.140000e+08 | 0.226775 | 0.137245 | . 4 2015-12-31 | 5.598000e+09 | 0.042846 | 1.130000e+08 | 5.485000e+09 | 0.0 | 1.254000e+09 | 4.300000e+09 | 1.298000e+09 | 42000000.0 | 1.312000e+09 | 464000000.0 | 0.0 | 0.0 | 8.480000e+08 | 0.0 | 8.480000e+08 | 6.610 | 6.56 | 128373000.0 | 129372000.0 | 0.788424 | 0.979814 | 0.289032 | 0.231869 | 0.151483 | 0.134512 | 1.618000e+09 | 1.298000e+09 | 8.480000e+08 | 0.234369 | 0.151483 | . 5 2014-12-31 | 5.368000e+09 | 0.041117 | 9.300000e+07 | 5.275000e+09 | 0.0 | 1.136000e+09 | 4.406000e+09 | 9.620000e+08 | 48000000.0 | 9.750000e+08 | 370000000.0 | 0.0 | 0.0 | 6.050000e+08 | 0.0 | 6.050000e+08 | 4.470 | 4.42 | 135445000.0 | 136801000.0 | 0.497072 | 0.982675 | 0.233979 | 0.179210 | 0.112705 | 0.062593 | 1.256000e+09 | 9.620000e+08 | 6.050000e+08 | 0.181632 | 0.112705 | . 6 2013-12-31 | 5.156000e+09 | 0.107151 | 8.400000e+07 | 5.072000e+09 | 0.0 | 1.086000e+09 | 4.318000e+09 | 8.380000e+08 | 56000000.0 | 8.160000e+08 | 308000000.0 | 0.0 | 0.0 | 5.080000e+08 | 0.0 | 5.080000e+08 | 7.260 | 7.16 | 69955000.0 | 70939000.0 | 0.394705 | 0.983708 | 0.214895 | 0.162529 | 0.098526 | 0.080489 | 1.108000e+09 | 8.380000e+08 | 5.080000e+08 | 0.000000 | 0.098526 | . 7 2012-12-31 | 4.657000e+09 | 0.078559 | 7.900000e+07 | 4.578000e+09 | 0.0 | 1.038000e+09 | 4.125000e+09 | 5.320000e+08 | 64000000.0 | 5.140000e+08 | 198000000.0 | 0.0 | 0.0 | 3.160000e+08 | 0.0 | 3.160000e+08 | 4.470 | 4.40 | 70708000.0 | 71784000.0 | 0.000000 | 0.983036 | 0.170925 | 0.114237 | 0.067855 | 0.050462 | 7.960000e+08 | 5.320000e+08 | 3.160000e+08 | 0.110371 | 0.067855 | . 8 2011-12-31 | 4.317800e+09 | 0.126686 | 6.720000e+07 | 4.250600e+09 | 0.0 | 9.905000e+08 | 3.868900e+09 | 4.489000e+08 | 87300000.0 | 3.937000e+08 | 149200000.0 | 0.0 | 0.0 | 2.445000e+08 | 0.0 | 2.445000e+08 | 6.810 | 6.66 | 35878000.0 | 36710000.0 | 0.000000 | 0.984437 | 0.161147 | 0.103965 | 0.056626 | 0.071472 | 6.958000e+08 | 4.489000e+08 | 2.445000e+08 | 0.091181 | 0.056626 | . 9 2010-12-31 | 3.832300e+09 | 0.127213 | 5.750000e+07 | 3.774800e+09 | 0.0 | 0.000000e+00 | 3.360700e+09 | 4.716000e+08 | 108300000.0 | 4.059000e+08 | 154800000.0 | 0.0 | 0.0 | 2.511000e+08 | 0.0 | 2.511000e+08 | 7.010 | 6.83 | 35822000.0 | 36786000.0 | 0.000000 | 0.984996 | 0.183206 | 0.123059 | 0.065522 | 0.096730 | 7.021000e+08 | 4.716000e+08 | 2.511000e+08 | 0.105916 | 0.065522 | . 10 2009-12-31 | 3.399800e+09 | -0.071800 | 1.534800e+09 | 1.865000e+09 | 0.0 | 1.119900e+09 | 1.597600e+09 | 2.674000e+08 | 104300000.0 | 2.029000e+08 | 81300000.0 | 0.0 | 0.0 | 1.216000e+08 | 0.0 | 1.216000e+08 | 0.848 | 0.84 | 141022012.0 | 143260000.0 | 0.000000 | 0.548600 | 0.155000 | 0.090400 | 0.036000 | -0.042900 | 5.264000e+08 | 3.072000e+08 | 1.216000e+08 | 0.059700 | 0.035800 | . Revenues . Revenue Growth &amp; Change in Growth . EPS . Cost Components . make_multi_LineGraph(operating_g, True) . Shares Outstanding . Margins . make_multi_LineGraph(margins_g, False) . Balance Sheet . row name Year Cash and cash equivalents Short-term investments Cash and short-term investments Receivables Inventories Total current assets Property, Plant &amp; Equipment Net Goodwill and Intangible Assets Long-term investments Tax assets Total non-current assets Total assets Payables Short-term debt Total current liabilities Long-term debt Total debt Deferred revenue Tax Liabilities Deposit Liabilities Total non-current liabilities Total liabilities Other comprehensive income Retained earnings (deficit) Total shareholders equity Investments Net Debt Other Assets Other Liabilities . 0 2019-12-31 | 221000000.0 | 1.300000e+09 | 1.521000e+09 | 0.0 | 72000000.0 | 2.037000e+09 | 6.902000e+09 | 2.065000e+09 | 3000000.0 | 0.0 | 1.095600e+10 | 1.299300e+10 | 146000000.0 | 269000000.0 | 3.201000e+09 | 1.264000e+09 | 1.533000e+09 | 750000000.0 | 40000000.0 | 0.0 | 3.451000e+09 | 8.662000e+09 | 0.0 | 5.133000e+09 | 4.331000e+09 | 1.303000e+09 | 1.312000e+09 | 0.0 | 2.010000e+09 | . 1 2018-12-31 | 105000000.0 | 1.131000e+09 | 1.236000e+09 | 0.0 | 60000000.0 | 1.787000e+09 | 6.781000e+09 | 2.070000e+09 | 2000000.0 | 0.0 | 9.125000e+09 | 1.091200e+10 | 132000000.0 | 486000000.0 | 2.942000e+09 | 1.617000e+09 | 2.103000e+09 | 705000000.0 | 40000000.0 | 0.0 | 3.716000e+09 | 7.161000e+09 | 0.0 | 4.534000e+09 | 3.751000e+09 | 1.133000e+09 | 1.998000e+09 | 0.0 | 5.030000e+08 | . 2 2017-12-31 | 194000000.0 | 1.427000e+09 | 1.621000e+09 | 0.0 | 57000000.0 | 2.146000e+09 | 6.284000e+09 | 2.076000e+09 | 3000000.0 | 0.0 | 8.594000e+09 | 1.074000e+10 | 120000000.0 | 307000000.0 | 2.700000e+09 | 2.262000e+09 | 2.569000e+09 | 699000000.0 | 43000000.0 | 0.0 | 3.167000e+09 | 7.019000e+09 | 0.0 | 4.454000e+09 | 3.721000e+09 | 1.430000e+09 | 2.375000e+09 | 0.0 | 1.152000e+09 | . 3 2016-12-31 | 328000000.0 | 1.252000e+09 | 1.580000e+09 | 0.0 | 47000000.0 | 2.050000e+09 | 5.666000e+09 | 2.077000e+09 | 3000000.0 | 0.0 | 7.912000e+09 | 9.962000e+09 | 92000000.0 | 319000000.0 | 2.535000e+09 | 2.645000e+09 | 2.964000e+09 | 640000000.0 | 33000000.0 | 0.0 | 3.525000e+09 | 7.031000e+09 | 0.0 | 3.568000e+09 | 2.931000e+09 | 1.255000e+09 | 2.636000e+09 | 0.0 | 9.710000e+08 | . 4 2015-12-31 | 73000000.0 | 1.255000e+09 | 1.328000e+09 | 0.0 | 51000000.0 | 1.663000e+09 | 4.802000e+09 | 0.000000e+00 | 2000000.0 | 0.0 | 4.870000e+09 | 6.533000e+09 | 63000000.0 | 115000000.0 | 1.806000e+09 | 5.710000e+08 | 6.860000e+08 | 431000000.0 | 22000000.0 | 0.0 | 1.615000e+09 | 4.122000e+09 | 0.0 | 2.890000e+09 | 2.411000e+09 | 1.257000e+09 | 6.130000e+08 | 0.0 | 7.010000e+08 | . 5 2014-12-31 | 107000000.0 | 1.110000e+09 | 1.217000e+09 | 0.0 | 58000000.0 | 1.756000e+09 | 4.299000e+09 | 0.000000e+00 | 4000000.0 | 117000000.0 | 4.425000e+09 | 6.181000e+09 | 62000000.0 | 117000000.0 | 1.671000e+09 | 6.860000e+08 | 8.030000e+08 | 374000000.0 | 0.0 | 0.0 | 1.697000e+09 | 4.054000e+09 | 292000000.0 | 2.144000e+09 | 2.127000e+09 | 1.114000e+09 | 6.960000e+08 | 0.0 | 6.860000e+08 | . 6 2013-12-31 | 80000000.0 | 1.250000e+09 | 1.330000e+09 | 0.0 | 60000000.0 | 1.762000e+09 | 3.893000e+09 | 0.000000e+00 | 4000000.0 | 113000000.0 | 4.076000e+09 | 5.838000e+09 | 64000000.0 | 12000000.0 | 1.580000e+09 | 7.540000e+08 | 7.660000e+08 | 335000000.0 | 0.0 | 0.0 | 1.475000e+09 | 3.809000e+09 | 536000000.0 | 1.607000e+09 | 2.029000e+09 | 1.254000e+09 | 6.860000e+08 | 0.0 | 7.540000e+08 | . 7 2012-12-31 | 122000000.0 | 1.130000e+09 | 1.252000e+09 | 0.0 | 58000000.0 | 1.737000e+09 | 3.609000e+09 | 0.000000e+00 | 39000000.0 | 148000000.0 | 3.768000e+09 | 5.505000e+09 | 65000000.0 | 18000000.0 | 1.501000e+09 | 8.710000e+08 | 8.890000e+08 | 443000000.0 | 0.0 | 0.0 | 1.712000e+09 | 4.084000e+09 | 660000000.0 | 1.127000e+09 | 1.421000e+09 | 1.169000e+09 | 7.670000e+08 | 0.0 | 8.710000e+08 | . 8 2011-12-31 | 102200000.0 | 1.038700e+09 | 1.140900e+09 | 0.0 | 44300000.0 | 1.595500e+09 | 3.401500e+09 | 0.000000e+00 | 70200000.0 | 134200000.0 | 3.599500e+09 | 5.195000e+09 | 103600000.0 | 31600000.0 | 1.509600e+09 | 1.099000e+09 | 1.130600e+09 | 410200000.0 | 71500000.0 | 0.0 | 1.413200e+09 | 4.021800e+09 | 714700000.0 | 8.106000e+08 | 1.173200e+09 | 1.108900e+09 | 1.028400e+09 | 0.0 | 1.099000e+09 | . 9 2010-12-31 | 89500000.0 | 1.118700e+09 | 1.208200e+09 | 0.0 | 45100000.0 | 1.662000e+09 | 3.117100e+09 | 0.000000e+00 | 0.0 | 120500000.0 | 3.354600e+09 | 5.016600e+09 | 60200000.0 | 221200000.0 | 1.424700e+09 | 1.313000e+09 | 1.534200e+09 | 0.0 | 0.0 | 0.0 | 1.173500e+09 | 3.911200e+09 | 769500000.0 | 5.661000e+08 | 1.105400e+09 | 1.118700e+09 | 1.444700e+09 | 0.0 | 1.313000e+09 | . 10 2009-12-31 | 164200000.0 | 1.027900e+09 | 1.192100e+09 | 111800000.0 | 45800000.0 | 1.634300e+09 | 3.167900e+09 | 0.000000e+00 | 0.0 | 120300000.0 | 3.361900e+09 | 4.996200e+09 | 63300000.0 | 156000000.0 | 1.269500e+09 | 1.699200e+09 | 1.855200e+09 | 435100000.0 | 151100000.0 | 0.0 | 2.854600e+09 | 4.124100e+09 | -240000000.0 | 3.150000e+08 | 8.721000e+08 | 1.027900e+09 | 6.631000e+08 | 284600000.0 | 1.050200e+09 | . Assets . make_multi_LineGraph(assets_g, True) . Investment and Cash Equivalents . make_multi_LineGraph(dep_g, True) . Liabilities . Liabilities Vs Equity . Cash Flows . row name Year Depreciation &amp; Amortization Stock-based compensation Operating Cash Flow Capital Expenditure Acquisitions and disposals Investment purchases and sales Investing Cash flow Issuance (repayment) of debt Issuance (buybacks) of shares Dividend payments Financing Cash Flow Effect of forex changes on cash Net cash flow / Change in cash Free Cash Flow Net Cash/Marketcap . 0 2019-12-31 | 423000000.0 | 29000000.0 | 1.722000e+09 | 6.960000e+08 | -0.000000e+00 | -185000000.0 | -7.910000e+08 | -1.100000e+09 | -75000000.0 | -173000000.0 | -8.130000e+08 | 0.0 | 221000000.0 | 1.026000e+09 | 0.0000 | . 1 2018-12-31 | 398000000.0 | 47000000.0 | 1.195000e+09 | 9.600000e+08 | -0.000000e+00 | 232000000.0 | -6.310000e+08 | -8.070000e+08 | -50000000.0 | -158000000.0 | -6.470000e+08 | 0.0 | 105000000.0 | 2.350000e+08 | 0.0000 | . 2 2017-12-31 | 372000000.0 | 55000000.0 | 1.590000e+09 | 1.026000e+09 | -0.000000e+00 | -256000000.0 | -1.132000e+09 | -3.970000e+08 | -75000000.0 | -148000000.0 | -5.920000e+08 | 0.0 | -134000000.0 | 5.640000e+08 | 0.0000 | . 3 2016-12-31 | 363000000.0 | 26000000.0 | 1.386000e+09 | 6.780000e+08 | -1.951000e+09 | -191000000.0 | -2.622000e+09 | -2.490000e+08 | -193000000.0 | -136000000.0 | 1.491000e+09 | 0.0 | 255000000.0 | 7.080000e+08 | 0.0000 | . 4 2015-12-31 | 320000000.0 | 25000000.0 | 1.584000e+09 | 8.310000e+08 | -0.000000e+00 | -657000000.0 | -9.300000e+08 | -1.160000e+08 | -505000000.0 | -102000000.0 | -6.880000e+08 | 0.0 | -34000000.0 | 7.530000e+08 | 0.0000 | . 5 2014-12-31 | 294000000.0 | 6000000.0 | 1.030000e+09 | 6.940000e+08 | -0.000000e+00 | -205000000.0 | -5.410000e+08 | -1.190000e+08 | -321000000.0 | -68000000.0 | -4.620000e+08 | 0.0 | 27000000.0 | 3.360000e+08 | 0.0000 | . 6 2013-12-31 | 270000000.0 | 32000000.0 | 9.810000e+08 | 5.660000e+08 | -0.000000e+00 | -288000000.0 | -6.980000e+08 | -1.610000e+08 | -135000000.0 | -28000000.0 | -3.250000e+08 | 0.0 | -42000000.0 | 4.150000e+08 | 0.0000 | . 7 2012-12-31 | 264000000.0 | 10000000.0 | 7.530000e+08 | 5.180000e+08 | -0.000000e+00 | -142000000.0 | -6.450000e+08 | -2.750000e+08 | -29000000.0 | -0.0 | -8.800000e+07 | 0.0 | 20000000.0 | 2.350000e+08 | 0.0000 | . 8 2011-12-31 | 246900000.0 | 16500000.0 | 6.960000e+08 | 3.874000e+08 | -0.000000e+00 | -7300000.0 | -4.033000e+08 | -3.335000e+08 | -60100000.0 | -0.0 | -2.800000e+08 | 0.0 | 12700000.0 | 3.086000e+08 | 0.0000 | . 9 2010-12-31 | 230500000.0 | 0.0 | 5.537000e+08 | 1.830000e+08 | -0.000000e+00 | -136100000.0 | -2.952000e+08 | -3.210000e+08 | -8600000.0 | -0.0 | -3.332000e+08 | 0.0 | -74700000.0 | 3.707000e+08 | 0.0000 | . 10 2009-12-31 | 219200000.0 | 12900000.0 | 2.925000e+08 | -4.384000e+08 | 0.000000e+00 | -217600000.0 | -6.574000e+08 | 1.400000e+07 | -10800000.0 | 0.0 | 2.460000e+08 | 0.0 | -118900000.0 | -1.459000e+08 | -0.5442 | . vects = [ &quot;Depreciation &amp; Amortization&quot; , &quot;Stock-based compensation&quot; , &quot;Operating Cash Flow&quot; , &quot;Capital Expenditure&quot; , &quot;Acquisitions and disposals&quot; , &quot;Investment purchases and sales&quot; , &quot;Investing Cash flow&quot; , &quot;Issuance (repayment) of debt&quot; , &quot;Issuance (buybacks) of shares&quot; , &quot;Dividend payments&quot; , &quot;Financing Cash Flow&quot; , &quot;Effect of forex changes on cash&quot; , &quot;Net cash flow / Change in cash&quot; , &quot;Free Cash Flow&quot; , &quot;Net Cash/Marketcap&quot; , ] outflows = [ &quot;Depreciation &amp; Amortization&quot; , &quot;Stock-based compensation&quot; ,&quot;Dividend payments&quot; ,&quot;Capital Expenditure&quot; ,&quot;Issuance (repayment) of debt&quot; , &quot;Issuance (buybacks) of shares&quot; ,&quot;Effect of forex changes on cash&quot; ,] flows = [&quot;Operating Cash Flow&quot; ,&quot;Acquisitions and disposals&quot; , &quot;Investment purchases and sales&quot; , &quot;Investing Cash flow&quot; ,&quot;Financing Cash Flow&quot; ,&quot;Free Cash Flow&quot; , ] ratios = [&quot;Net cash flow / Change in cash&quot; ,&quot;Net Cash/Marketcap&quot; , ] out_g = df[df[&#39;Metric&#39;].isin(outflows)] flow_g = df[df[&#39;Metric&#39;].isin(flows)] ratio_g = df[df[&#39;Metric&#39;].isin(ratios)] . Outflows . make_multi_LineGraph(out_g, False) . make_multi_LineGraph(out_g, True) . Other Cash Flows . make_multi_LineGraph(flow_g, False) . make_multi_LineGraph(flow_g, True) . Ratios . make_multi_LineGraph(ratio_g, False) . make_multi_LineGraph(ratio_g, True) . Peer Comparison . Big Comp Table . Ticker Company Sector Industry Country Index P/E EPS (ttm) Insider Own Shs Outstand Perf Week Market Cap Forward P/E EPS next Y Insider Trans Shs Float Perf Month Income PEG EPS next Q Inst Own Short Float Perf Quarter Sales P/S EPS this Y Inst Trans Short Ratio Perf Half Y Book/sh P/B ROA Target Price Perf Year Cash/sh P/C EPS next 5Y ROE 52W Range Perf YTD Dividend P/FCF EPS past 5Y ROI 52W High Beta Dividend % Quick Ratio Sales past 5Y Gross Margin 52W Low ATR Employees Current Ratio Sales Q/Q Oper. Margin RSI (14) Volatility Optionable Debt/Eq EPS Q/Q Profit Margin Rel Volume Prev Close Shortable LT Debt/Eq Earnings Payout Avg Volume Price Recom SMA20 SMA50 SMA200 Volume Change . 0 ALK | Alaska Air Group, Inc. | Services | Regional Airlines | USA | S&amp;P 500 | 5.50 | 6.18 | 0.30% | 123.13M | 23.50% | 4.19B | 8.20 | 216.00% | -1.80% | 122.05M | 20.01% | 769.00M | 4.44 | -1.08 | 90.00% | 3.27% | -49.17% | 8.78B | 0.48 | 75.50% | -0.59% | 1.39 | -51.48% | 35.18 | 0.97 | 6.00% | 45.25 | -45.07% | 12.35 | 2.75 | 1.24% | 18.90% | 20.02 - 72.22 | -49.82% | - | 3.02 | 6.90% | 14.00% | -52.92% | 1.42 | - | 0.60 | 10.30% | 56.10% | 69.83% | 2.92 | 24134 | 0.60 | 7.90% | 12.10% | 54.94 | 6.89% 8.15% | Yes | 0.35 | 683.70% | 8.80% | 1.40 | 31.58 | Yes | 0.29 | May 05 BMO | 22.40% | 2.87M | 34.00 | 2.30 | 19.27% | -9.09% | -42.09% | 4,002,548 | 7.66% | . 1 AAL | American Airlines Group Inc. | Services | Major Airlines | USA | S&amp;P 500 | 3.32 | 3.81 | 1.30% | 426.89M | 22.98% | 5.39B | 11.03 | 108.50% | 0.98% | 421.02M | 3.10% | 1.69B | 0.29 | -2.26 | 84.30% | 19.37% | -52.87% | 45.77B | 0.12 | 25.20% | -0.88% | 1.58 | -59.73% | -0.27 | - | 2.80% | 16.25 | -63.05% | 8.96 | 1.41 | 11.28% | - | 9.09 - 34.99 | -55.96% | 0.40 | - | -0.70% | 10.30% | -63.90% | 1.81 | 3.17% | 0.30 | 1.40% | 61.50% | 38.94% | 1.36 | 133000 | 0.40 | 3.40% | 6.70% | 51.95 | 7.34% 9.51% | Yes | - | 35.10% | 3.70% | 2.21 | 11.26 | Yes | - | Apr 30 BMO | 10.50% | 51.51M | 12.63 | 3.20 | 15.61% | -15.87% | -49.70% | 113,669,408 | 12.17% | . 2 DAL | Delta Air Lines, Inc. | Services | Major Airlines | USA | S&amp;P 500 | 5.07 | 5.39 | 0.30% | 639.81M | 21.58% | 17.48B | 6.61 | 170.10% | -86.23% | 639.81M | -4.71% | 3.50B | 1.32 | -4.17 | 88.70% | 3.91% | -51.77% | 45.13B | 0.39 | 28.70% | -0.15% | 0.69 | -50.48% | 22.46 | 1.22 | 5.40% | 38.93 | -53.13% | - | - | 3.85% | 23.90% | 19.10 - 63.44 | -53.28% | - | 4.14 | 56.40% | 19.60% | -56.93% | 1.33 | - | 0.50 | 3.10% | 53.50% | 43.04% | 2.54 | 91224 | 0.50 | -18.00% | 11.50% | 50.93 | 6.29% 8.27% | Yes | 1.19 | -176.60% | 7.80% | 2.27 | 24.34 | Yes | 0.88 | Apr 22 BMO | 28.80% | 36.39M | 27.32 | 2.20 | 16.37% | -19.29% | -47.26% | 81,614,880 | 12.24% | . 3 LUV | Southwest Airlines Co. | Services | Regional Airlines | USA | S&amp;P 500 | 7.34 | 4.22 | 0.30% | 526.00M | 4.24% | 16.29B | 9.87 | 190.80% | -59.39% | 506.62M | -11.77% | 2.27B | 4.59 | -0.41 | 89.10% | 1.91% | -45.56% | 22.43B | 0.73 | -2.00% | 0.57% | 0.83 | -46.27% | 18.69 | 1.66 | 8.70% | 43.06 | -42.89% | 7.74 | 4.00 | 1.60% | 23.30% | 28.25 - 58.83 | -42.63% | 0.72 | 6.29 | 20.80% | 18.20% | -47.36% | 1.40 | 2.32% | 0.60 | 3.80% | 74.50% | 9.63% | 2.56 | 60800 | 0.70 | 0.50% | 13.20% | 42.21 | 5.85% 6.69% | Yes | 0.27 | -21.80% | 10.30% | 9.86 | 29.69 | Yes | 0.19 | Apr 28 BMO | 16.40% | 11.68M | 30.97 | 2.60 | -2.73% | -20.46% | -38.70% | 101,007,792 | 4.31% | . 4 UAL | United Airlines Holdings, Inc. | Services | Major Airlines | USA | S&amp;P 500 | 2.68 | 11.63 | 0.30% | 248.79M | 20.60% | 7.76B | 5.74 | 134.70% | -0.27% | 246.21M | 3.48% | 3.01B | 0.26 | -2.88 | - | 9.11% | -58.50% | 43.26B | 0.18 | 51.30% | 0.22% | 1.02 | -66.15% | 45.72 | 0.68 | 5.80% | 49.50 | -64.88% | 19.87 | 1.57 | 10.20% | 28.00% | 17.80 - 96.03 | -64.57% | - | 3.26 | 31.60% | 12.90% | -67.50% | 1.56 | - | 0.50 | 2.10% | 62.00% | 75.34% | 3.49 | 96000 | 0.50 | 3.80% | 9.90% | 48.35 | 6.98% 10.68% | Yes | 1.29 | 51.20% | 7.00% | 2.44 | 27.84 | Yes | 1.16 | Apr 30 AMC | 0.00% | 22.01M | 31.21 | 2.40 | 14.40% | -23.51% | -58.95% | 52,643,464 | 12.10% | . Market Value . Enterprise Value . Leverage . DCF Valuation . Generating a range of growth rate scenarios: . #collapse-hide SR_g_scenarios = np.linspace(-.03,.04,15,endpoint=False) print(SR_g_scenarios) . . [-0.03 -0.02533333 -0.02066667 -0.016 -0.01133333 -0.00666667 -0.002 0.00266667 0.00733333 0.012 0.01666667 0.02133333 0.026 0.03066667 0.03533333] . DCF Growth Rate Scenario . Firm Value/Share ($) Equity Value/Share ($) SR CAGR LR CAGR Implied ROI (%) . 0 Firm Value/Share ($) | Equity Value/Share ($) | SR CAGR | LR CAGR | Implied ROI (%) | . 1 138.905 | 77.4672 | -0.03 | 0.01 | 127.845 | . 2 141.907 | 79.1414 | -0.0253333 | 0.01 | 132.769 | . 3 144.963 | 80.846 | -0.0206667 | 0.01 | 137.782 | . 4 148.075 | 82.5815 | -0.016 | 0.01 | 142.887 | . 5 151.243 | 84.3483 | -0.0113333 | 0.01 | 148.083 | . 6 154.468 | 86.147 | -0.00666667 | 0.01 | 153.373 | . 7 157.751 | 87.9778 | -0.002 | 0.01 | 158.758 | . 8 161.092 | 89.8412 | 0.00266667 | 0.01 | 164.239 | . 9 164.493 | 91.7378 | 0.00733333 | 0.01 | 169.817 | . 10 167.954 | 93.6679 | 0.012 | 0.01 | 175.494 | . 11 171.476 | 95.632 | 0.0166667 | 0.01 | 181.271 | . 12 175.059 | 97.6306 | 0.0213333 | 0.01 | 187.149 | . 13 178.706 | 99.6641 | 0.026 | 0.01 | 193.13 | . 14 182.415 | 101.733 | 0.0306667 | 0.01 | 199.215 | . 15 186.189 | 103.838 | 0.0353333 | 0.01 | 205.405 | . Seems to do a decent job, however this does not take into account the shock from coronavirus which will probably hurt revenues next year. We will modifiy the discounted cash flow formula to include a shock to FCF in the first year. . Firm Value/Share ($) Equity Value/Share ($) SR CAGR LR CAGR Implied ROI (%) . 0 Firm Value/Share ($) | Equity Value/Share ($) | SR CAGR | LR CAGR | Implied ROI (%) | . 1 69.4524 | 38.7336 | -0.03 | 0.01 | 13.9224 | . 2 70.9533 | 39.5707 | -0.0253333 | 0.01 | 16.3844 | . 3 72.4816 | 40.423 | -0.0206667 | 0.01 | 18.8911 | . 4 74.0375 | 41.2907 | -0.016 | 0.01 | 21.4434 | . 5 75.6216 | 42.1742 | -0.0113333 | 0.01 | 24.0417 | . 6 77.2341 | 43.0735 | -0.00666667 | 0.01 | 26.6867 | . 7 78.8755 | 43.9889 | -0.002 | 0.01 | 29.3791 | . 8 80.5462 | 44.9206 | 0.00266667 | 0.01 | 32.1195 | . 9 82.2465 | 45.8689 | 0.00733333 | 0.01 | 34.9085 | . 10 83.9769 | 46.834 | 0.012 | 0.01 | 37.7469 | . 11 85.7379 | 47.816 | 0.0166667 | 0.01 | 40.6353 | . 12 87.5297 | 48.8153 | 0.0213333 | 0.01 | 43.5744 | . 13 89.3528 | 49.8321 | 0.026 | 0.01 | 46.5649 | . 14 91.2076 | 50.8665 | 0.0306667 | 0.01 | 49.6074 | . 15 93.0946 | 51.9189 | 0.0353333 | 0.01 | 52.7026 | . DCF Peer Comparison . Firm Value/Share ($) Equity Value/Share ($) SR CAGR LR CAGR Implied ROI (%) . ticker . ALK 87.014531 | 48.528018 | 0.02 | 0.01 | 42.729465 | . AAL 54.319490 | 54.473259 | 0.02 | 0.01 | 331.300545 | . DAL 58.522847 | 38.246862 | 0.02 | 0.01 | 39.995833 | . LUV 28.131268 | 11.806731 | 0.02 | 0.01 | -61.876877 | . UAL 670.864513 | 465.525445 | 0.02 | 0.01 | 1391.590660 | . Historical DCF Scenario Backtest Analysis Using Differint Bases (Work In Progress.) . (WIP -- NEED TO DO MORE CODE BUT THIS WILL HOW HOW ACCURATE OUR MODELS ARE OVER TIME AND WHAT EARNINGS BASE MAKE THE BEST ESTIMATORS FOR THIS FIRM) . from google.colab import drive import sys . &#39;&#39;&#39; Quick visualization toolkit. I&#39;d like to build this out to be decently powerful in terms of enabling quick interpretation of DCF related data. &#39;&#39;&#39; import sys import matplotlib.pyplot as plt import seaborn as sns sys.path.append(&#39;..&#39;) sns.set() sns.set_context(&#39;paper&#39;) def visualize(dcf_prices, current_share_prices, regress = True): &#39;&#39;&#39; 2d plot comparing dcf-forecasted per share price with where a list of stocks is currently trading args: dcf_prices: dict of {&#39;ticker&#39;: price, ...} for dcf-values current_share_prices: dict of {&#39;ticker&#39;: price, ...} for (guess) regress: regress a line of best fit, because why not returns: nada &#39;&#39;&#39; # TODO: implement return NotImplementedError def visualize_bulk_historicals(dcfs, ticker, condition): &#39;&#39;&#39; multiple 2d plot comparing historical DCFS of different growth assumption conditions args: dcfs: list of dcfs of format {&#39;value1&#39;, {&#39;year1&#39;: dcf}, ...} condition: dict of format {&#39;condition&#39;: [value1, value2, value3]} &#39;&#39;&#39; dcf_share_prices = {} variable = list(condition.keys())[0] #TODO: make this more eloquent for handling the plotting of multiple condition formats try: conditions = [str(cond) for cond in list(condition.values())[0]] except IndexError: print(condition) conditions = [condition[&#39;Ticker&#39;]] for cond in conditions: dcf_share_prices[cond] = {} years = dcfs[cond].keys() for year in years: dcf_share_prices[cond][year] = dcfs[cond][year][&#39;share_price&#39;] for cond in conditions: plt.plot(list(dcf_share_prices[cond].keys())[::-1], list(dcf_share_prices[cond].values())[::-1], label = cond) # sorry for anybody reading this, bit too pythonic # the second argument here just fetches the list of dates we&#39;re using as x values # in the above plt.plot() call without knowing the conditions we index with abo historical_stock_prices = get_historical_share_prices(ticker, list(dcf_share_prices[list(dcf_share_prices.keys())[0]].keys())[::-1]) plt.plot(list(historical_stock_prices.keys()), list(historical_stock_prices.values()), label = &#39;${} over time&#39;.format(ticker)) plt.rcParams[&quot;figure.figsize&quot;]=20,20 plt.xlabel(&#39;Date&#39;) plt.ylabel(&#39;Share price ($)&#39;) plt.legend(loc = &#39;upper right&#39;) plt.title(&#39;$&#39; + ticker + &#39; &#39;) return plt def visualize_historicals(dcfs): &#39;&#39;&#39; 2d plot comparing dcf history to share price history &#39;&#39;&#39; pass dcf_share_prices = {} for k, v in dcfs.items(): dcf_share_prices[dcfs[k][&#39;date&#39;]] = dcfs[k][&#39;share_price&#39;] xs = list(dcf_share_prices.keys())[::-1] ys = list(dcf_share_prices.values())[::-1] plt.scatter(xs, ys) plt.rcParams[&quot;figure.figsize&quot;]=20,20 return plt . def prettyprint(dcfs, years): &#39;&#39;&#39; Pretty print-out results of a DCF query. Handles formatting for all output variatisons. &#39;&#39;&#39; LISTTEST = [] if years &gt; 1: for k, v in dcfs.items(): LISTTEST.append(&#39;ticker: {}&#39;.format(k)) if len(dcfs[k].keys()) &gt; 1: for yr, dcf in v.items(): LISTTEST.append(&#39;date: {} nvalue: {}&#39;.format(yr, dcf)) else: for k, v in dcfs.items(): LISTTEST.append(&#39;ticker: {} nvalue: {}&#39;.format(k, v)) print(LISTTEST) # return None . # !pip install argparse # # !rm -R DCF # !pip install matplotlib urllib3 seaborn # # !git clone https://github.com/albisbub/DCF.git # # !pip install git+https://github.com/albisbub/DCF.git # # !git merge DCF/DCF # # !ls DCF # # !pip install git+file://c:/DCF/modelling # # !pip install git+file://c:/DCF/visualization # !pip install fuckit # import fuckit # import os # import subprocess # import argparse # from modeling.data import * # from modeling.dcf import * # from visualization.plot import * # from visualization.printouts import * def main(args): &#39;&#39;&#39; although the if statements are less than desirable, it allows rapid exploration of historical or present DCF values for either a single or list of tickers. &#39;&#39;&#39; parser = argparse.ArgumentParser() parser.add_argument(&#39;--p&#39;, &#39;--period&#39;, help = &#39;years to forecast&#39;, type = int, default = 5) parser.add_argument(&#39;--t&#39;, &#39;--ticker&#39;, help = &#39;pass a single ticker to do historical DCF&#39;, type = str, default = &#39;AAPL&#39;) parser.add_argument(&#39;--y&#39;, &#39;--years&#39;, help = &#39;number of years to compute DCF analysis for&#39;, type = int, default = 1) parser.add_argument(&#39;--i&#39;, &#39;--interval&#39;, help = &#39;interval period for each calc, either &quot;annual&quot; or &quot;quarter&quot;&#39;, default = &#39;annual&#39;) parser.add_argument(&#39;--s&#39;, &#39;--step_increase&#39;, help = &#39;specify step increase for EG, CG, PG to enable comparisons.&#39;, type = float, default = 0) parser.add_argument(&#39;--steps&#39;, help = &#39;steps to take if --s is &gt; 0&#39;, default = 5) parser.add_argument(&#39;--v&#39;, &#39;--variable&#39;, help = &#39;if --step_increase is specified, must specifiy variable to increase from: [earnings_growth_rate, discount_rate]&#39;, default = None) parser.add_argument(&#39;--d&#39;, &#39;--discount_rate&#39;, help = &#39;discount rate for future cash flow to firm&#39;, default = 0.1) parser.add_argument(&#39;--eg&#39;, &#39;--earnings_growth_rate&#39;, help = &#39;growth in revenue, YoY&#39;, type = float, default = .05) parser.add_argument(&#39;--cg&#39;, &#39;--cap_ex_growth_rate&#39;, help = &#39;growth in cap_ex, YoY&#39;, type = float, default = 0.045) parser.add_argument(&#39;--pg&#39;, &#39;--perpetual_growth_rate&#39;, help = &#39;for perpetuity growth terminal value&#39;, type = float, default = 0.05) args = parser.parse_args(args.split()) if args.s &gt; 0: if args.v is not None: if args.v == &#39;eg&#39; or &#39;earnings_growth_rate&#39;: cond, dcfs = run_setup(args, variable = &#39;eg&#39;) elif args.v == &#39;cg&#39; or &#39;cap_ex_growth_rate&#39;: cond, dcfs = run_setup(args, variable = &#39;cg&#39;) elif args.v == &#39;pg&#39; or &#39;perpetual_growth_rate&#39;: cond, dcfs = run_setup(args, variable = &#39;pg&#39;) elif args.v == &#39;discount_rate&#39; or &#39;discount&#39;: cond, dcfs = run_setup(args, variable = &#39;discount&#39;) # TODO: more dynamically do this...potentially? else: raise ValueError(&#39;args.variable is invalid, must choose (as of now) from this list -&gt; [earnings_growth_rate, cap_ex_growth_rate, perpetual_growth_rate, discount&#39;) else: # should we just default to something? raise ValueError(&#39;If step (-- s) is &gt; 0, you must specify the variable via --v. What was passed is invalid.&#39;) else: cond, dcfs = {&#39;Ticker&#39;: [args.t]}, {} dcfs[args.t] = historical_DCF(args.t, args.y, args.p, args.d, args.eg, args.cg, args.pg, args.i) if args.y &gt; 1: # can&#39;t graph single timepoint very well.... return visualize_bulk_historicals(dcfs, args.t, cond) else: prettyprint(dcfs, args.y) def run_setup(args, variable): dcfs, cond = {}, {args.v: []} for increment in range(1, int(args.steps) + 1): # default to 5 steps? # this should probably be wrapped in another function.. var = vars(args)[variable] * (1 + (args.s * increment)) step = &#39;{}: {}&#39;.format(args.v, str(var)[0:4]) cond[args.v].append(step) vars(args)[variable] = var dcfs[step] = historical_DCF(args.t, args.y, args.p, args.d, args.eg, args.cg, args.pg, args.i) return cond, dcfs def multiple_tickers(): &#39;&#39;&#39; can be called from main to spawn dcf/historical dcfs for a list of tickers TODO: fully fix &#39;&#39;&#39; # if args.ts is not None: # &#39;&#39;&#39;list to forecast&#39;&#39;&#39; # if args.y &gt; 1: # for ticker in args.ts: # dcfs[ticker] = historical_DCF(args.t, args.y, args.p, args.eg, args.cg, args.pgr) # else: # for ticker in args.tss: # dcfs[ticker] = DCF(args.t, args.p, args.eg, args.cg, args.pgr) # elif args.t is not None: # &#39;&#39;&#39; single ticker&#39;&#39;&#39; # if args.y &gt; 1: # dcfs[args.t] = historical_DCF(args.t, args.y, args.p, args.eg, args.cg, args.pgr) # else: # dcfs[args.t] = DCF(args.t, args.p, args.eg, args.cg, args.pgr) # else: # raise ValueError(&#39;A ticker or list of tickers must be specified with --ticker or --tickers&#39;) return NotImplementedError . Scenario Callibration . Forecasting flows for 5 years out, starting at 2019-12-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2020 3.67E+08 | 2.94E+08 | 1.23E+08 | -1.16E+08 | 1.77E+08 | 2021 4.68E+08 | 3.90E+08 | 1.64E+08 | -8.08E+07 | 1.92E+08 | 2022 6.33E+08 | 5.84E+08 | 2.46E+08 | -5.66E+07 | 2.18E+08 | 2023 9.20E+08 | 9.69E+08 | 4.08E+08 | -3.96E+07 | 2.58E+08 | 2024 1.46E+09 | 1.77E+09 | 7.44E+08 | -2.77E+07 | 3.16E+08 | Enterprise Value for ALK: $2.11E+10. Equity Value for ALK: $1.97E+10. Per share value for ALK: $1.59E+02. Forecasting flows for 5 years out, starting at 2019-09-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2020 6.32E+08 | 4.92E+08 | 1.23E+08 | -1.12E+07 | 2.03E+08 | 2021 7.30E+08 | 6.54E+08 | 1.64E+08 | -7.84E+06 | 2.21E+08 | 2022 9.37E+08 | 9.78E+08 | 2.46E+08 | -5.49E+06 | 2.51E+08 | 2023 1.34E+09 | 1.62E+09 | 4.08E+08 | -3.84E+06 | 2.96E+08 | 2024 2.11E+09 | 2.96E+09 | 7.44E+08 | -2.69E+06 | 3.63E+08 | Enterprise Value for ALK: $3.07E+10. Equity Value for ALK: $2.92E+10. Per share value for ALK: $2.36E+02. Forecasting flows for 5 years out, starting at 2019-06-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2020 7.44E+08 | 4.24E+08 | 1.22E+08 | 1.52E+08 | 2.28E+08 | 2021 7.75E+08 | 5.64E+08 | 1.63E+08 | 1.06E+08 | 2.48E+08 | 2022 9.23E+08 | 8.43E+08 | 2.43E+08 | 7.44E+07 | 2.82E+08 | 2023 1.25E+09 | 1.40E+09 | 4.04E+08 | 5.21E+07 | 3.33E+08 | 2024 1.92E+09 | 2.55E+09 | 7.37E+08 | 3.65E+07 | 4.07E+08 | Enterprise Value for ALK: $2.83E+10. Equity Value for ALK: $2.66E+10. Per share value for ALK: $2.16E+02. Forecasting flows for 5 years out, starting at 2019-03-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2020 3.75E+08 | 2.91E+07 | 1.23E+08 | 1.50E+08 | 1.20E+08 | 2021 3.52E+08 | 3.87E+07 | 1.64E+08 | 1.05E+08 | 1.31E+08 | 2022 3.80E+08 | 5.79E+07 | 2.46E+08 | 7.34E+07 | 1.49E+08 | 2023 4.77E+08 | 9.61E+07 | 4.08E+08 | 5.14E+07 | 1.75E+08 | 2024 6.90E+08 | 1.75E+08 | 7.44E+08 | 3.60E+07 | 2.15E+08 | Enterprise Value for ALK: $1.05E+10. Equity Value for ALK: $8.46E+09. Per share value for ALK: $6.86E+01. Forecasting flows for 5 years out, starting at 2018-12-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2019 3.60E+08 | 5.36E+07 | 1.26E+08 | -1.88E+08 | 4.24E+08 | 2020 4.49E+08 | 7.13E+07 | 1.67E+08 | -1.32E+08 | 4.62E+08 | 2021 5.64E+08 | 1.07E+08 | 2.50E+08 | -9.23E+07 | 5.25E+08 | 2022 7.40E+08 | 1.77E+08 | 4.15E+08 | -6.46E+07 | 6.19E+08 | 2023 1.04E+09 | 3.23E+08 | 7.58E+08 | -4.52E+07 | 7.59E+08 | Enterprise Value for ALK: $1.55E+10. Equity Value for ALK: $1.36E+10. Per share value for ALK: $1.11E+02. Forecasting flows for 5 years out, starting at 2018-09-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2019 3.68E+08 | 3.46E+08 | 1.15E+08 | -1.12E+08 | 1.37E+08 | 2020 4.76E+08 | 4.60E+08 | 1.53E+08 | -7.84E+07 | 1.49E+08 | 2021 6.53E+08 | 6.88E+08 | 2.29E+08 | -5.49E+07 | 1.69E+08 | 2022 9.66E+08 | 1.14E+09 | 3.81E+08 | -3.84E+07 | 2.00E+08 | 2023 1.56E+09 | 2.08E+09 | 6.95E+08 | -2.69E+07 | 2.45E+08 | Enterprise Value for ALK: $2.25E+10. Equity Value for ALK: $2.02E+10. Per share value for ALK: $1.64E+02. Forecasting flows for 5 years out, starting at 2018-06-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2019 5.60E+08 | 3.16E+08 | 1.13E+08 | 7.14E+07 | 1.96E+08 | 2020 6.01E+08 | 4.20E+08 | 1.50E+08 | 5.00E+07 | 2.14E+08 | 2021 7.29E+08 | 6.28E+08 | 2.25E+08 | 3.50E+07 | 2.43E+08 | 2022 9.98E+08 | 1.04E+09 | 3.73E+08 | 2.45E+07 | 2.87E+08 | 2023 1.53E+09 | 1.90E+09 | 6.81E+08 | 1.71E+07 | 3.51E+08 | Enterprise Value for ALK: $2.26E+10. Equity Value for ALK: $2.03E+10. Per share value for ALK: $1.65E+02. Forecasting flows for 5 years out, starting at 2018-03-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2019 3.23E+08 | 3.38E+07 | 1.10E+08 | -2.24E+07 | 2.46E+08 | 2020 3.53E+08 | 4.49E+07 | 1.46E+08 | -1.57E+07 | 2.68E+08 | 2021 4.17E+08 | 6.72E+07 | 2.18E+08 | -1.10E+07 | 3.04E+08 | 2022 5.37E+08 | 1.12E+08 | 3.61E+08 | -7.68E+06 | 3.58E+08 | 2023 7.63E+08 | 2.04E+08 | 6.60E+08 | -5.38E+06 | 4.39E+08 | Enterprise Value for ALK: $1.14E+10. Equity Value for ALK: $9.07E+09. Per share value for ALK: $7.36E+01. Forecasting flows for 5 years out, starting at 2017-12-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2018 6.65E+08 | 1.89E+08 | 1.13E+08 | -4.76E+07 | 1.93E+08 | 2019 7.90E+08 | 2.51E+08 | 1.50E+08 | -3.33E+07 | 2.11E+08 | 2020 1.04E+09 | 3.75E+08 | 2.25E+08 | -2.33E+07 | 2.39E+08 | 2021 1.50E+09 | 6.23E+08 | 3.73E+08 | -1.63E+07 | 2.82E+08 | 2022 2.40E+09 | 1.14E+09 | 6.81E+08 | -1.14E+07 | 3.46E+08 | Enterprise Value for ALK: $3.48E+10. Equity Value for ALK: $3.23E+10. Per share value for ALK: $2.61E+02. Forecasting flows for 5 years out, starting at 2017-09-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2018 5.69E+08 | 5.11E+08 | 1.11E+08 | -1.48E+08 | 3.44E+08 | 2019 6.96E+08 | 6.80E+08 | 1.47E+08 | -1.03E+08 | 3.75E+08 | 2020 9.06E+08 | 1.02E+09 | 2.20E+08 | -7.24E+07 | 4.25E+08 | 2021 1.28E+09 | 1.69E+09 | 3.65E+08 | -5.07E+07 | 5.02E+08 | 2022 1.97E+09 | 3.08E+09 | 6.67E+08 | -3.55E+07 | 6.15E+08 | Enterprise Value for ALK: $2.87E+10. Equity Value for ALK: $2.61E+10. Per share value for ALK: $2.11E+02. Forecasting flows for 5 years out, starting at 2017-06-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2018 8.34E+08 | 5.74E+08 | 1.05E+08 | 1.48E+08 | 3.09E+08 | 2019 8.70E+08 | 7.64E+08 | 1.39E+08 | 1.04E+08 | 3.37E+08 | 2020 1.03E+09 | 1.14E+09 | 2.08E+08 | 7.27E+07 | 3.83E+08 | 2021 1.38E+09 | 1.90E+09 | 3.46E+08 | 5.09E+07 | 4.52E+08 | 2022 2.09E+09 | 3.46E+09 | 6.32E+08 | 3.56E+07 | 5.53E+08 | Enterprise Value for ALK: $3.09E+10. Equity Value for ALK: $2.82E+10. Per share value for ALK: $2.29E+02. Forecasting flows for 5 years out, starting at 2017-03-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2018 5.19E+08 | 1.93E+08 | 1.05E+08 | 1.14E+08 | 2.26E+08 | 2019 5.23E+08 | 2.57E+08 | 1.39E+08 | 7.99E+07 | 2.46E+08 | 2020 5.97E+08 | 3.85E+08 | 2.08E+08 | 5.59E+07 | 2.79E+08 | 2021 7.72E+08 | 6.38E+08 | 3.46E+08 | 3.91E+07 | 3.30E+08 | 2022 1.13E+09 | 1.16E+09 | 6.32E+08 | 2.74E+07 | 4.04E+08 | Enterprise Value for ALK: $1.69E+10. Equity Value for ALK: $1.43E+10. Per share value for ALK: $1.16E+02. Forecasting flows for 5 years out, starting at 2019-12-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2020 3.75E+08 | 3.02E+08 | 1.27E+08 | -1.16E+08 | 1.77E+08 | 2021 4.98E+08 | 4.21E+08 | 1.77E+08 | -8.08E+07 | 1.92E+08 | 2022 7.10E+08 | 6.72E+08 | 2.83E+08 | -5.66E+07 | 2.18E+08 | 2023 1.11E+09 | 1.20E+09 | 5.06E+08 | -3.96E+07 | 2.58E+08 | 2024 1.91E+09 | 2.40E+09 | 1.01E+09 | -2.77E+07 | 3.16E+08 | Enterprise Value for ALK: $2.73E+10. Equity Value for ALK: $2.58E+10. Per share value for ALK: $2.09E+02. Forecasting flows for 5 years out, starting at 2019-09-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2020 6.45E+08 | 5.06E+08 | 1.27E+08 | -1.12E+07 | 2.03E+08 | 2021 7.74E+08 | 7.06E+08 | 1.77E+08 | -7.84E+06 | 2.21E+08 | 2022 1.05E+09 | 1.12E+09 | 2.83E+08 | -5.49E+06 | 2.51E+08 | 2023 1.61E+09 | 2.02E+09 | 5.06E+08 | -3.84E+06 | 2.96E+08 | 2024 2.78E+09 | 4.01E+09 | 1.01E+09 | -2.69E+06 | 3.63E+08 | Enterprise Value for ALK: $3.98E+10. Equity Value for ALK: $3.82E+10. Per share value for ALK: $3.10E+02. Forecasting flows for 5 years out, starting at 2019-06-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2020 7.55E+08 | 4.36E+08 | 1.26E+08 | 1.52E+08 | 2.28E+08 | 2021 8.14E+08 | 6.09E+08 | 1.76E+08 | 1.06E+08 | 2.48E+08 | 2022 1.02E+09 | 9.70E+08 | 2.80E+08 | 7.44E+07 | 2.82E+08 | 2023 1.49E+09 | 1.74E+09 | 5.02E+08 | 5.21E+07 | 3.33E+08 | 2024 2.50E+09 | 3.46E+09 | 9.98E+08 | 3.65E+07 | 4.07E+08 | Enterprise Value for ALK: $3.62E+10. Equity Value for ALK: $3.45E+10. Per share value for ALK: $2.80E+02. Forecasting flows for 5 years out, starting at 2019-03-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2020 3.79E+08 | 3.00E+07 | 1.27E+08 | 1.50E+08 | 1.20E+08 | 2021 3.64E+08 | 4.18E+07 | 1.77E+08 | 1.05E+08 | 1.31E+08 | 2022 4.13E+08 | 6.66E+07 | 2.83E+08 | 7.34E+07 | 1.49E+08 | 2023 5.55E+08 | 1.19E+08 | 5.06E+08 | 5.14E+07 | 1.75E+08 | 2024 8.80E+08 | 2.38E+08 | 1.01E+09 | 3.60E+07 | 2.15E+08 | Enterprise Value for ALK: $1.30E+10. Equity Value for ALK: $1.10E+10. Per share value for ALK: $8.94E+01. Forecasting flows for 5 years out, starting at 2018-12-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2019 3.64E+08 | 5.51E+07 | 1.29E+08 | -1.88E+08 | 4.24E+08 | 2020 4.63E+08 | 7.69E+07 | 1.81E+08 | -1.32E+08 | 4.62E+08 | 2021 6.00E+08 | 1.23E+08 | 2.88E+08 | -9.23E+07 | 5.25E+08 | 2022 8.27E+08 | 2.20E+08 | 5.16E+08 | -6.46E+07 | 6.19E+08 | 2023 1.25E+09 | 4.37E+08 | 1.03E+09 | -4.52E+07 | 7.59E+08 | Enterprise Value for ALK: $1.84E+10. Equity Value for ALK: $1.65E+10. Per share value for ALK: $1.34E+02. Forecasting flows for 5 years out, starting at 2018-09-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2019 3.78E+08 | 3.56E+08 | 1.19E+08 | -1.12E+08 | 1.37E+08 | 2020 5.09E+08 | 4.97E+08 | 1.66E+08 | -7.84E+07 | 1.49E+08 | 2021 7.39E+08 | 7.92E+08 | 2.64E+08 | -5.49E+07 | 1.69E+08 | 2022 1.17E+09 | 1.42E+09 | 4.73E+08 | -3.84E+07 | 2.00E+08 | 2023 2.06E+09 | 2.82E+09 | 9.41E+08 | -2.69E+07 | 2.45E+08 | Enterprise Value for ALK: $2.93E+10. Equity Value for ALK: $2.71E+10. Per share value for ALK: $2.20E+02. Forecasting flows for 5 years out, starting at 2018-06-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2019 5.69E+08 | 3.25E+08 | 1.16E+08 | 7.14E+07 | 1.96E+08 | 2020 6.31E+08 | 4.53E+08 | 1.62E+08 | 5.00E+07 | 2.14E+08 | 2021 8.08E+08 | 7.22E+08 | 2.59E+08 | 3.50E+07 | 2.43E+08 | 2022 1.19E+09 | 1.29E+09 | 4.63E+08 | 2.45E+07 | 2.87E+08 | 2023 1.99E+09 | 2.58E+09 | 9.22E+08 | 1.71E+07 | 3.51E+08 | Enterprise Value for ALK: $2.88E+10. Equity Value for ALK: $2.65E+10. Per share value for ALK: $2.16E+02. Forecasting flows for 5 years out, starting at 2018-03-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2019 3.26E+08 | 3.47E+07 | 1.13E+08 | -2.24E+07 | 2.46E+08 | 2020 3.65E+08 | 4.85E+07 | 1.57E+08 | -1.57E+07 | 2.68E+08 | 2021 4.47E+08 | 7.73E+07 | 2.51E+08 | -1.10E+07 | 3.04E+08 | 2022 6.09E+08 | 1.39E+08 | 4.49E+08 | -7.68E+06 | 3.58E+08 | 2023 9.38E+08 | 2.76E+08 | 8.94E+08 | -5.38E+06 | 4.39E+08 | Enterprise Value for ALK: $1.38E+10. Equity Value for ALK: $1.14E+10. Per share value for ALK: $9.28E+01. Forecasting flows for 5 years out, starting at 2017-12-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2018 6.80E+08 | 1.94E+08 | 1.16E+08 | -4.76E+07 | 1.93E+08 | 2019 8.41E+08 | 2.71E+08 | 1.62E+08 | -3.33E+07 | 2.11E+08 | 2020 1.17E+09 | 4.32E+08 | 2.59E+08 | -2.33E+07 | 2.39E+08 | 2021 1.82E+09 | 7.74E+08 | 4.63E+08 | -1.63E+07 | 2.82E+08 | 2022 3.17E+09 | 1.54E+09 | 9.22E+08 | -1.14E+07 | 3.46E+08 | Enterprise Value for ALK: $4.53E+10. Equity Value for ALK: $4.28E+10. Per share value for ALK: $3.46E+02. Forecasting flows for 5 years out, starting at 2017-09-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2018 5.80E+08 | 5.26E+08 | 1.14E+08 | -1.48E+08 | 3.44E+08 | 2019 7.34E+08 | 7.34E+08 | 1.59E+08 | -1.03E+08 | 3.75E+08 | 2020 1.00E+09 | 1.17E+09 | 2.53E+08 | -7.24E+07 | 4.25E+08 | 2021 1.51E+09 | 2.10E+09 | 4.54E+08 | -5.07E+07 | 5.02E+08 | 2022 2.53E+09 | 4.17E+09 | 9.03E+08 | -3.55E+07 | 6.15E+08 | Enterprise Value for ALK: $3.64E+10. Equity Value for ALK: $3.38E+10. Per share value for ALK: $2.74E+02. Forecasting flows for 5 years out, starting at 2017-06-30. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2018 8.46E+08 | 5.91E+08 | 1.08E+08 | 1.48E+08 | 3.09E+08 | 2019 9.10E+08 | 8.24E+08 | 1.51E+08 | 1.04E+08 | 3.37E+08 | 2020 1.13E+09 | 1.31E+09 | 2.40E+08 | 7.27E+07 | 3.83E+08 | 2021 1.63E+09 | 2.36E+09 | 4.30E+08 | 5.09E+07 | 4.52E+08 | 2022 2.70E+09 | 4.69E+09 | 8.56E+08 | 3.56E+07 | 5.53E+08 | Enterprise Value for ALK: $3.92E+10. Equity Value for ALK: $3.65E+10. Per share value for ALK: $2.95E+02. Forecasting flows for 5 years out, starting at 2017-03-31. DFCF | EBIT | D&amp;A | CWC | CAP_EX | 2018 5.25E+08 | 1.99E+08 | 1.08E+08 | 1.14E+08 | 2.26E+08 | 2019 5.43E+08 | 2.78E+08 | 1.51E+08 | 7.99E+07 | 2.46E+08 | 2020 6.49E+08 | 4.43E+08 | 2.40E+08 | 5.59E+07 | 2.79E+08 | 2021 8.98E+08 | 7.93E+08 | 4.30E+08 | 3.91E+07 | 3.30E+08 | 2022 1.44E+09 | 1.58E+09 | 8.56E+08 | 2.74E+07 | 4.04E+08 | Enterprise Value for ALK: $2.11E+10. Equity Value for ALK: $1.85E+10. Per share value for ALK: $1.49E+02. . import pandas as pd %matplotlib inline a.show() . Conclusions and Summary . # print(returned_output.decode(&quot;utf-8&quot;)) .",
            "url": "https://albisbub.github.io/RFIC-Pitches/ALK/",
            "relUrl": "/ALK/",
            "date": " • Apr 29, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Historical Macroeconomic Data",
            "content": ". This is a work in progress report that will give real time info on macroeconomic conditions, along with info on our holdings composition. . To Do: . Github LIVE data updating | Collect historical records of portfolio for returns analysis | . Imports and Helpers . FRED Data Cleaning and Grouping . # exploring the basics, gdp, unemployment, and inflation prices_n = [ &#39;cpi_inflation&#39;, &#39;gdp_deflator&#39;,&#39;cpi_urban&#39;,&#39;cpi_medical&#39;] prices_id = [&#39;CPIAUCSL&#39;,&quot;FPCPITOTLZGUSA&quot;,&quot;A191RI1Q225SBEA&quot;,&quot;CPIMEDSL&quot;] fed_n = [&quot;M1&quot;,&quot;M2&quot;,&quot;M2_less_M1&quot;,&quot;effective_ffr&quot;,&quot;ffr_upper&quot;,&quot;ffr_lower&quot;] fed_id = [&quot;M1&quot;,&quot;M2&quot;,&quot;NONM1&quot;,&quot;DFF&quot;,&quot;DFEDTARU&quot;,&quot;DFEDTARL&quot;] output_n = [&#39;potential_gdp&#39;,&#39;nominal_gdp&#39;,&#39;real_GDP&#39;] output_id = [&#39;GDPPOT&#39;,&#39;GDPC1&#39;,&#39;GDP&#39;] per_cap_n = [&#39;gdp_per_capita&#39;,] per_cap_id = [&#39;A939RX0Q048SBEA&#39;] # employment_n = [&#39;unemployment_rate&#39;,&quot;fed_natural_rate&quot;,&#39;insured_unemployment_rate&#39;,&#39;20_and_over&#39;, &#39;black_or_african_american&#39;,&#39;LNU04032183&#39;,&#39;women&#39;,&#39;men&#39;] # employment_id = [&#39;UNRATE&#39;,&quot;NROU&quot;,&#39;IURSA&#39;,&#39;LNS14000024&#39;,&#39;LNS14000006&#39;,&#39;LNU04032183&#39;,&#39;LNS14000002&#39;,&#39;LNS14000001&#39;] # employment_n = [&#39;unemployment_rate&#39;,&quot;fed_natural_rate&quot;,&#39;insured_unemployment_rate&#39;,&#39;20_and_over&#39;, &#39;black_or_african_american&#39;,&#39;LNU04032183&#39;,&#39;women&#39;,&#39;men&#39;] # employment_id = [&#39;UNRATE&#39;,&quot;NROU&quot;,&#39;IURSA&#39;,&#39;LNS14000024&#39;,&#39;LNS14000006&#39;,&#39;LNU04032183&#39;,&#39;LNS14000002&#39;,&#39;LNS14000001&#39;] # employment_n = [&#39;unemployment_rate&#39;,&quot;fed_natural_rate&quot;,&#39;insured_unemployment_rate&#39;,] # employment_id = [&#39;UNRATE&#39;,&quot;NROU&quot;,&#39;IURSA&#39;,] employment_n = [&#39;unemployment_rate&#39;,&quot;fed_natural_rate&quot;,] employment_id = [&#39;UNRATE&#39;,&quot;NROU&quot;,] # # 1 Mo 2 Mo 3 Mo 6 Mo 1 Yr 2 Yr 3 Yr 5 Yr 7 Yr 10 Yr 20 Yr 30 Yr yield_curve_n = [&#39;DGS1MO&#39;,&quot;DGS2MO&quot;,&quot;DGS6MO&quot;,&quot;DGS1&quot;,&quot;DGS2&quot;,&quot;DGS3&quot;,&quot;DGS5&quot;,&quot;DGS7&quot;,&quot;DGS10&quot;,&quot;DGS20&quot;,&quot;DGS30&quot;] yield_curve_id = [&#39;DGS1MO&#39;,&quot;DGS2MO&quot;,&quot;DGS6MO&quot;,&quot;DGS1&quot;,&quot;DGS2&quot;,&quot;DGS3&quot;,&quot;DGS5&quot;,&quot;DGS7&quot;,&quot;DGS10&quot;,&quot;DGS20&quot;,&quot;DGS30&quot;] # yield_curve_n = [&quot;DGS6MO&quot;,&quot;DGS1&quot;,&quot;DGS2&quot;,&quot;DGS3&quot;,&quot;DGS5&quot;,&quot;DGS7&quot;,&quot;DGS10&quot;,&quot;DGS20&quot;,&quot;DGS30&quot;] # yield_curve_id = [&#39;DGS1MO&#39;,&quot;DGS2MO&quot;,&quot;DGS6MO&quot;,&quot;DGS1&quot;,&quot;DGS2&quot;,&quot;DGS3&quot;,&quot;DGS5&quot;,&quot;DGS7&quot;,&quot;DGS10&quot;,&quot;DGS20&quot;,&quot;DGS30&quot;] # print(len(series_names),len(series_ids)) prices =compile_FRED(prices_n, prices_id, obs_start = &#39;1950-01-01&#39;, obs_end = today) prices[&#39;cpi_inflation&#39;] = prices[&#39;cpi_inflation&#39;].pct_change() * 100 prices[&#39;cpi_medical&#39;] = prices[&#39;cpi_medical&#39;].pct_change() * 100 for i in prices.columns: print(i) if i != &#39;date&#39;: prices[i] = prices[i].round(2) # prices = prices.pct_change() # prices[&#39;cpi_urban&#39;] = prices[&#39;cpi_urban&#39;].pct_change() # prices[&#39;cpi_medical&#39;] = prices[&#39;cpi_medical&#39;].pct_change() fed =compile_FRED(fed_n, fed_id, obs_start = &#39;1950-01-01&#39;, obs_end = today) output =compile_FRED(output_n, output_id, obs_start = &#39;1950-01-01&#39;, obs_end = today) pcap = compile_FRED(per_cap_n,per_cap_id, obs_start = &#39;1950-01-01&#39;, obs_end = today) for i in pcap.columns: print(i) if i != &#39;date&#39;: pcap[i] = ((pcap[i].pct_change())*100).round(2) for i in output.columns: print(i) if i != &#39;date&#39;: output[i] = ((output[i].pct_change())*100).round(2) employment =compile_FRED(employment_n, employment_id, obs_start = &#39;1950-01-01&#39;, obs_end = today) # yield_curve= compile_FRED(yield_curve_n, yield_curve_id, obs_start = &#39;1950-01-01&#39;, obs_end = today) macro_dfList = [prices,fed,output,pcap,employment] # US_data.columns # # add gdp per capital growth RATE, inflation RATE to the data set, as well as a flag for growth vs. recession per quarter # US_data[&#39;gdp_growth_rate&#39;] = US_data[&#39;gdp_per_capita&#39;].pct_change() # US_data[&#39;cpi_inflation_rate&#39;] = US_data[&#39;cpi&#39;].pct_change() # US_data[&#39;growth&#39;] = US_data[&#39;gdp_growth_rate&#39;] &gt; 0.0 # # drop null rows from the first period, which dont have percent changes # US_data = US_data.dropna() # US_data.head() . date cpi_inflation gdp_deflator cpi_urban cpi_medical date gdp_per_capita date potential_gdp nominal_gdp real_GDP . def formatMacros(inputs): ColumnList = list(inputs.columns) yearList = list(inputs.date) # print(ColumnList) # print(yearList) # transposed = inputs.transpose() cleaned = inputs.rename_axis(&#39;date&#39;) # print(cleaned.columns) # cleaned.drop(cleaned.columns[0],inplace=True) byYear = cleaned.set_index(&#39;date&#39;).stack() df = pd.DataFrame(byYear, columns=[&#39;Value&#39;]) # print(df) df.reset_index(inplace=True) # print(df.columns) df.rename(columns={&#39;level_1&#39;:&#39;Metric&#39;}, inplace=True) # df.dropna(inplace=True) # df[&#39;Value&#39;] = pd.to_numeric(df[&#39;Value&#39;], errors=&#39;coerce&#39;) # print(df) # print(df.columns) df = df[~df[&#39;date&#39;].isin([&#39;level_0&#39;,&#39;index&#39;])] # df = df.drop([&#39;level_0&#39;,&#39;index&#39;],axis=0) # print(df.Year) df.Year = df.date.astype(str) return df _prices = formatMacros(prices) . Prices . Values are in percents, so a reading of 6 on the following chart is interpreted as 6%, not 600%. . CPI Inflation Baskets . Aggregate Demand . Y = (Consumption) + (Investment) + (Govt. Spending) - (Net Exports) . Percent Change . Are we on a steady state growth path? Last 30 Years . Per Capita Output . make_multi_LineGraph(_pcap,True) . Consumption . Investment . Governmtment Spending . Exports/Imports . Net Exports = Exports-Imports | . Aggregate Supply . Productivity . Input Markets . Real Estate Markets . Labor Markets . Unemployment Rated . def gpct(input, logged,recent): _input = formatMacros(input) if recent: return make_multi_LineGraph(_input[_input.date &gt; yearsago], logged) else: return make_multi_LineGraph(_input, logged) gpct(employment, False, False) . gpct(employment, True,False) . gpct(employment, False, True) . gpct(employment, True, True) . Credit Markets . Capital Stock . Fed Watching . Balance Sheet . Fed Funds Rate Targets . Repurchase Activity . Theoretical Relationships . Classical Phillips Curve . # explore some visualizations here # let&#39;s take a look at a classic macro 101 relationship - the Phillips curve # https://en.wikipedia.org/wiki/Phillips_curve sns.pairplot(data=US_data, x_vars=[&#39;unemployment_rate&#39;], y_vars=[&#39;cpi_inflation_rate&#39;], size=7); . # doesnt seem to be much evidence of the Phillips curve in this correlation plot . # # try out some basic models on this data, attempting to predict if the US economy will grow or recede the next quarter (classification) # # going to adjust the data a bit first, since we should be trying to predict with past data # # each will have 4 lagged variables for unemployment rate, inflation rate, and gdp growth rate # US_data_new = US_data.copy() # # lagged unemployment # US_data_new[&#39;unemployment_1&#39;] = US_data_new[&#39;unemployment_rate&#39;].shift(periods=1) # US_data_new[&#39;unemployment_2&#39;] = US_data_new[&#39;unemployment_rate&#39;].shift(periods=2) # US_data_new[&#39;unemployment_3&#39;] = US_data_new[&#39;unemployment_rate&#39;].shift(periods=3) # US_data_new[&#39;unemployment_4&#39;] = US_data_new[&#39;unemployment_rate&#39;].shift(periods=4) # # gdp lags # US_data_new[&#39;gdp_1&#39;] = US_data_new[&#39;gdp_growth_rate&#39;].shift(periods=1) # US_data_new[&#39;gdp_2&#39;] = US_data_new[&#39;gdp_growth_rate&#39;].shift(periods=2) # US_data_new[&#39;gdp_3&#39;] = US_data_new[&#39;gdp_growth_rate&#39;].shift(periods=3) # US_data_new[&#39;gdp_4&#39;] = US_data_new[&#39;gdp_growth_rate&#39;].shift(periods=4) # # inflation lags # US_data_new[&#39;cpi_1&#39;] = US_data_new[&#39;cpi_inflation_rate&#39;].shift(periods=1) # US_data_new[&#39;cpi_2&#39;] = US_data_new[&#39;cpi_inflation_rate&#39;].shift(periods=2) # US_data_new[&#39;cpi_3&#39;] = US_data_new[&#39;cpi_inflation_rate&#39;].shift(periods=3) # US_data_new[&#39;cpi_4&#39;] = US_data_new[&#39;cpi_inflation_rate&#39;].shift(periods=4) # # convert target to 0/1 instead of boolean # US_data_new[&#39;growth&#39;].replace(False, 0, inplace=True) # # drop null rows for which we don&#39;t have new lagged variables # US_data_new = US_data_new.dropna() # # target and feature enumeration # target = [&#39;growth&#39;] # features = [&#39;unemployment_1&#39;, &#39;unemployment_2&#39;, &#39;unemployment_3&#39;, &#39;unemployment_4&#39;, &#39;gdp_1&#39;, &#39;gdp_2&#39;, &#39;gdp_3&#39;, &#39;gdp_4&#39;, &#39;cpi_1&#39;, &#39;cpi_2&#39;, &#39;cpi_3&#39;, &#39;cpi_4&#39;] # # train test split # from sklearn.model_selection import train_test_split # train, test = train_test_split(US_data_new, random_state=0) # US_data_new.head() . date gdp_per_capita unemployment_rate cpi gdp_growth_rate cpi_inflation_rate growth unemployment_1 unemployment_2 unemployment_3 unemployment_4 gdp_1 gdp_2 gdp_3 gdp_4 cpi_1 cpi_2 cpi_3 cpi_4 . 5 1951-04-01 | 15968.0 | 3.1 | 25.92 | 0.013262 | 0.021277 | 1.0 | 3.7 | 4.2 | 5.0 | 5.8 | 0.009416 | 0.014557 | 0.034209 | 0.026846 | 0.035918 | 0.017865 | 0.017759 | 0.005955 | . 6 1951-07-01 | 16223.0 | 3.1 | 25.91 | 0.015969 | -0.000386 | 1.0 | 3.1 | 3.7 | 4.2 | 5.0 | 0.013262 | 0.009416 | 0.014557 | 0.034209 | 0.021277 | 0.035918 | 0.017865 | 0.017759 | . 7 1951-10-01 | 16181.0 | 3.5 | 26.16 | -0.002589 | 0.009649 | 0.0 | 3.1 | 3.1 | 3.7 | 4.2 | 0.015969 | 0.013262 | 0.009416 | 0.014557 | -0.000386 | 0.021277 | 0.035918 | 0.017865 | . 8 1952-01-01 | 16288.0 | 3.2 | 26.45 | 0.006613 | 0.011086 | 1.0 | 3.5 | 3.1 | 3.1 | 3.7 | -0.002589 | 0.015969 | 0.013262 | 0.009416 | 0.009649 | -0.000386 | 0.021277 | 0.035918 | . 9 1952-04-01 | 16259.0 | 2.9 | 26.46 | -0.001780 | 0.000378 | 0.0 | 3.2 | 3.5 | 3.1 | 3.1 | 0.006613 | -0.002589 | 0.015969 | 0.013262 | 0.011086 | 0.009649 | -0.000386 | 0.021277 | . Modelling/Forecasting .",
            "url": "https://albisbub.github.io/RFIC-Pitches/2020/04/01/Macro-and-Holdings-Snapshot.html",
            "relUrl": "/2020/04/01/Macro-and-Holdings-Snapshot.html",
            "date": " • Apr 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "RFIC MEETING 6",
            "content": ". Source Data . COMING SOON: To Replicate Analysis With Another Stock . Duplicate The Following SpreadSheets | Exploratory Sheet: | Valuation Sheet: | Peer Valuation Sheet: | . Then Duplicate This Colab Notebook . Features To Add On: bold text- Feature to clean and format financial data automatically from edgar . Fetching industry metrics from domadran&#39;s websites for comparison with larger sample set | Facet BarGraph For comp table in peer analysis | . Financial Statements (Billions) . Income Statement . #collapse-hide income = booking_df_list[0][1] income_table = income.drop_duplicates(keep=False) income_table[income.columns] . . Year 12/1/2019 12/1/2018 12/1/2017 12/1/2016 12/1/2015 12/1/2014 12/1/2013 12/1/2012 12/1/2011 12/1/2010 . 0 Operating Revenue | $15.07 | $14.53 | $12.68 | $10.74 | $9.22 | $8.44 | $6.79 | $5.26 | $4.36 | $3.09 | . 1 Revenue | $15.07 | $14.53 | $12.68 | $10.74 | $9.22 | $8.44 | $6.79 | $5.26 | $4.36 | $3.09 | . 2 Cost of Goods Sold | $0.00 | $0.00 | $0.24 | $0.42 | $0.63 | $0.86 | $1.08 | $1.18 | $1.28 | $1.18 | . 3 Gross Profit | $0.00 | $0.00 | $12.44 | $10.33 | $8.59 | $7.58 | $5.72 | $4.08 | $3.08 | $1.91 | . 4 Sales and Marketing Expense | $5.92 | $5.79 | $5.11 | $4.23 | $3.37 | $2.90 | $2.16 | $1.51 | $1.12 | $0.70 | . 5 General and Administrative Expense | $3.05 | $2.74 | $2.24 | $1.80 | $1.58 | $1.30 | $0.95 | $0.64 | $0.48 | $0.35 | . 6 SG&amp;A Expense | $8.97 | $8.53 | $7.35 | $6.03 | $4.95 | $4.21 | $3.11 | $2.15 | $1.59 | $1.06 | . 7 Research and Development Expense | $0.29 | $0.23 | $0.19 | $0.14 | $0.11 | $0.98 | $0.07 | $0.04 | $0.03 | $0.02 | . 8 Investment Write Off | $0.00 | $0.00 | $0.00 | $0.06 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | . 9 Special Income and Charges | $0.00 | $0.00 | $0.00 | -$1.00 | $0.000 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | . 10 Operating Interest Expense | $0.27 | $0.27 | $0.25 | $0.21 | $0.16 | $0.09 | $0.08 | $0.06 | $0.03 | $0.03 | . 11 Operating Interest Income | $0.15 | $0.19 | $0.16 | $0.10 | $0.06 | $0.01 | $0.00 | $0.00 | $0.01 | $0.00 | . 12 Net Operating Interest Income | -$0.11 | -$0.08 | -$0.10 | -$0.11 | -$0.10 | -$0.07 | -$0.08 | -$0.06 | -$0.02 | -$0.03 | . 13 Other Operating Expenses | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | . 14 Total Operating Expenses | $9.72 | $9.19 | $7.90 | $6.48 | $5.33 | $4.51 | $3.30 | $2.25 | $1.68 | $1.12 | . 15 Operating Income | $5.35 | $5.34 | $4.54 | $3.85 | $3.26 | $3.07 | $2.41 | $1.83 | $1.40 | $0.79 | . 16 Non-Operating Interest Income | $0.15 | $0.19 | $0.16 | $0.10 | $0.06 | $0.01 | $0.00 | $0.00 | $0.01 | $0.00 | . 17 Non-Operating Interest Expense | $0.27 | $0.27 | $0.25 | $0.21 | $0.16 | $0.09 | $0.08 | $0.06 | $0.03 | $0.03 | . 18 Net Non-Operating Interest Income Expense | -$0.11 | -$0.08 | -$0.10 | -$0.11 | -$0.10 | -$0.07 | -$0.08 | -$0.06 | -$0.02 | -$0.03 | . 19 Other Income and Expenses | $0.73 | -$0.42 | -$0.04 | -$1.02 | -$0.03 | -$0.01 | -$0.04 | -$0.01 | -$0.01 | -$0.01 | . 20 Net Interest Income | -$0.11 | -$0.08 | -$0.10 | -$0.11 | -$0.10 | -$0.07 | -$0.08 | -$0.06 | -$0.02 | -$0.03 | . 21 Pre-Tax Income | $5.96 | $4.84 | $4.40 | $2.71 | $3.13 | $2.99 | $2.30 | $1.76 | $1.37 | $0.75 | . 22 Provision for Income Taxes | $1.09 | $0.84 | $2.06 | $0.58 | $0.58 | $0.57 | $0.40 | $0.34 | $0.31 | $0.22 | . 23 Income from Continuing Operations | $4.87 | $4.00 | $2.34 | $2.14 | $2.55 | $2.42 | $1.89 | $1.42 | $1.06 | $0.53 | . 24 Income Attributable to Minority Interest | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | . 25 Preferred Stock Dividend | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | . 26 Net Income | $4.87 | $4.00 | $2.34 | $2.14 | $2.55 | $2.42 | $1.89 | $1.42 | $1.06 | $0.53 | . 27 Normalized Income | $4.27 | $4.35 | $2.37 | $2.94 | $2.57 | $2.43 | $1.92 | $1.43 | $1.06 | $0.54 | . 28 EBITDA | $6.87 | $5.53 | $5.02 | $3.23 | $3.56 | $3.29 | $2.50 | $1.89 | $1.45 | $0.83 | . 29 Reconciled Depreciation | $0.64 | $0.43 | $0.36 | $0.31 | $0.27 | $0.21 | $0.12 | $0.07 | $0.05 | $0.05 | . 30 EBIT | $6.22 | $5.10 | $4.65 | $2.92 | $3.29 | $3.08 | $2.38 | $1.82 | $1.40 | $0.78 | . Balance Sheet . #collapse-hide balance = booking_df_list[1][1] balance_table = balance.drop_duplicates(keep=False) balance_table[balance_table.columns] . . Year 12/1/2019 12/1/2018 12/1/2017 12/1/2016 12/1/2015 12/1/2014 12/1/2013 12/1/2012 12/1/2011 12/1/2010 . 0 Cash and Equivalents | $6.31 | $2.62 | $2.54 | $2.08 | $1.48 | $3.15 | $1.29 | $1.54 | $0.63 | $0.36 | | . 1 Short Term Investments | $1.00 | $3.66 | $4.86 | $2.22 | $1.17 | $1.14 | $5.46 | $3.65 | $2.03 | $1.30 | | . 2 Cash and Short Term Investments | $7.31 | $6.28 | $7.40 | $4.30 | $2.65 | $4.29 | $6.75 | $5.18 | $2.66 | $1.66 | | . 3 Accounts Receivable | $1.68 | $1.52 | $1.22 | $0.86 | $0.65 | $0.64 | $0.54 | $0.37 | $0.26 | $0.16 | | . 4 Total Receivables | $1.68 | $1.52 | $1.22 | $0.86 | $0.65 | $0.64 | $0.54 | $0.37 | $0.26 | $0.16 | | . 5 Prepaid Expenses | $0.84 | $0.60 | $0.42 | $0.24 | $0.26 | $0.18 | $0.11 | $0.08 | $0.10 | $0.06 | | . 6 Restricted Cash | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.01 | $0.01 | $0.00 | $0.00 | | . 7 Current Deferred Tax Assets | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.07 | $0.04 | $0.04 | $0.07 | | . 8 Other Current Assets | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 9 Total Current Assets | $9.83 | $8.41 | $9.04 | $5.40 | $3.55 | $5.11 | $7.48 | $5.68 | $3.07 | $1.96 | | . 10 Properties | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 11 Machine, Furniture &amp; Equipment | $1.24 | $1.02 | $0.82 | $0.56 | $0.43 | $0.44 | $0.31 | $0.23 | $0.18 | $0.13 | | . 12 Other Properties | $0.62 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 13 Construction in Progress | $0.16 | $0.09 | $0.01 | $0.01 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 14 Leases | $0.27 | $0.24 | $0.20 | $0.14 | $0.11 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 15 Gross PP&amp;E | $2.29 | $1.35 | $1.02 | $0.71 | $0.54 | $0.44 | $0.31 | $0.23 | $0.18 | $0.13 | | . 16 Accumulated D&amp;A | -$0.93 | -$0.69 | -$0.54 | -$0.36 | -$0.26 | -$0.24 | -$0.18 | -$0.14 | -$0.11 | -$0.09 | | . 17 Net PP&amp;E | $1.36 | $0.66 | $0.48 | $0.35 | $0.27 | $0.20 | $0.14 | $0.09 | $0.06 | $0.04 | | . 18 Goodwill | $2.91 | $2.91 | $2.74 | $2.40 | $3.38 | $3.33 | $1.77 | $0.52 | $0.50 | $0.51 | | . 19 Other Intangible Assets | $1.95 | $2.13 | $2.18 | $1.99 | $2.17 | $2.34 | $1.02 | $0.21 | $0.20 | $0.23 | | . 20 Goodwill and Intangibles | $4.87 | $5.04 | $4.92 | $4.39 | $5.54 | $5.66 | $2.79 | $0.73 | $0.70 | $0.74 | | . 21 Long Term Investments | $4.48 | $8.41 | $10.87 | $9.59 | $7.93 | $3.76 | $0.00 | $0.00 | $0.00 | $0.00 | | . 22 Long Term Deferred Assets | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.02 | $0.06 | $0.12 | $0.15 | | . 23 Other Long Term Assets | $0.87 | $0.18 | $0.15 | $0.11 | $0.12 | $0.04 | $0.01 | $0.01 | $0.01 | $0.01 | | . 24 Total Long Term Assets | $11.57 | $14.28 | $16.42 | $14.44 | $13.87 | $9.66 | $2.96 | $0.89 | $0.90 | $0.95 | | . 25 Total Assets | $21.40 | $22.69 | $25.45 | $19.84 | $17.42 | $14.77 | $10.44 | $6.57 | $3.97 | $2.91 | | . 26 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 27 Liabilities (Annual) | 12/1/2019 | 12/1/2018 | 12/1/2017 | 12/1/2016 | 12/1/2015 | 12/1/2014 | 12/1/2013 | 12/1/2012 | 12/1/2011 | 12/1/2010 | | . 28 Accounts Payable | $1.24 | $1.13 | $0.67 | $0.42 | $0.32 | $0.28 | $0.25 | $0.18 | $0.15 | $0.09 | | . 29 Total Payables | $1.24 | $1.13 | $0.67 | $0.42 | $0.32 | $0.28 | $0.25 | $0.18 | $0.15 | $0.09 | | . 30 Accrued Expenses | $1.58 | $1.40 | $1.14 | $0.86 | $0.68 | $0.60 | $0.55 | $0.39 | $0.22 | $0.24 | | . 31 Payables and Accrued Expenses | $2.82 | $2.53 | $1.81 | $1.28 | $1.00 | $0.88 | $0.79 | $0.57 | $0.37 | $0.33 | | . 32 Other Current Borrowings | $0.99 | $0.00 | $0.71 | $0.97 | $0.00 | $0.04 | $0.15 | $0.52 | $0.50 | $0.00 | | . 33 Current Portion of Long Term Debt | $0.99 | $0.00 | $0.71 | $0.97 | $0.00 | $0.04 | $0.15 | $0.52 | $0.50 | $0.00 | | . 34 Current Debt &amp; Capital Lease Obligation | $0.99 | $0.00 | $0.71 | $0.97 | $0.00 | $0.04 | $0.15 | $0.52 | $0.50 | $0.00 | | . 35 Current Deferred Revenue | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 36 Current Deferred Liabilities | $1.56 | $1.02 | $0.98 | $0.61 | $0.43 | $0.46 | $0.44 | $0.37 | $0.24 | $0.14 | | . 37 Other Current Liability | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 38 Total Current Liabilities | $5.37 | $3.56 | $3.50 | $2.86 | $1.44 | $1.38 | $1.38 | $1.46 | $1.11 | $0.47 | | . 39 Non-Current Portion of Long Term Debt | $7.64 | $8.65 | $8.81 | $6.20 | $6.16 | $3.82 | $1.75 | $0.94 | $0.08 | $0.48 | | . 40 Long Term Cap Lease Obligation | $0.46 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 41 Non-Current Portion of LTD and Capital Lease O... | $8.10 | $8.65 | $8.81 | $6.20 | $6.16 | $3.82 | $1.75 | $0.94 | $0.08 | $0.48 | | . 42 Long Term Deferred Tax Liabilities | $1.90 | $1.54 | $1.73 | $0.82 | $0.89 | $0.90 | $0.33 | $0.05 | $0.05 | $0.06 | | . 43 Non-Current Deferred Liabilities | $1.90 | $1.54 | $1.73 | $0.82 | $0.89 | $0.90 | $0.33 | $0.05 | $0.05 | $0.06 | | . 44 Minority Interest Ownership | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.05 | | . 45 Preferred Securities out of Shareholders Equity | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.16 | $0.13 | $0.00 | | . 46 Other Long Term Liabilities | $0.10 | $0.16 | $0.15 | $0.14 | $0.13 | $0.10 | $0.08 | $0.07 | $0.04 | $0.04 | | . 47 Total Long Term Liabilities | $10.10 | $10.35 | $10.69 | $7.16 | $7.19 | $4.83 | $2.15 | $1.21 | $0.29 | $0.58 | | . 48 Total Liabilities | $15.47 | $13.90 | $14.19 | $10.02 | $8.63 | $6.20 | $3.54 | $2.67 | $1.40 | $1.05 | | . Cash Flows . #collapse-hide cash = booking_df_list[2][1] cash_table = cash.drop_duplicates(keep=False) cash_table[cash_table.columns] . . Year 2019-12 2018-12 2017-12 2016-12 2015-12 2014-12 2013-12 2012-12 2011-12 2010-12 . 0 Net Income | $4.87 | $4.00 | $2.34 | $2.14 | $2.55 | $2.42 | $1.89 | $1.42 | $1.06 | $0.53 | | . 1 Gain and Loss on Sale of PPE | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 2 Earnings Loss from Eq. Investments | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 3 Operating Gains Losses | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.01 | $0.03 | $0.00 | $0.00 | $0.01 | | . 4 Depreciation Expense | $0.64 | $0.43 | $0.36 | $0.14 | $0.10 | $0.08 | $0.05 | $0.03 | $0.02 | $0.02 | | . 5 Amortization Expense CF | $0.00 | $0.00 | $0.00 | $0.17 | $0.17 | $0.13 | $0.07 | $0.03 | $0.03 | $0.03 | | . 6 Total Depreciation and Amortization | $0.64 | $0.43 | $0.36 | $0.31 | $0.27 | $0.21 | $0.12 | $0.07 | $0.05 | $0.05 | | . 7 Total Depreciation, Amortization, Depletion | $0.64 | $0.43 | $0.36 | $0.31 | $0.27 | $0.21 | $0.12 | $0.07 | $0.05 | $0.05 | | . 8 Deferred Taxes | $0.12 | -$0.15 | -$0.03 | -$0.11 | -$0.06 | $0.03 | -$0.01 | $0.02 | $0.04 | $0.04 | | . 9 Amortization of Securities | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 10 Asset Impairment Charge | $0.00 | $0.00 | $0.00 | $1.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 11 Unrealized Gain (Loss) on Investment Securities | -$0.75 | $0.37 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 12 Stock Based Compensation | $0.33 | $0.33 | $0.26 | $0.25 | $0.25 | $0.19 | $0.14 | $0.07 | $0.07 | $0.07 | | . 13 Excess Tax Benefit from Stock Compensation | $0.00 | $0.00 | $0.00 | $0.06 | $0.10 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 14 Other Noncash Items | $0.06 | $0.06 | $0.08 | $0.08 | $0.07 | $0.06 | $0.06 | $0.05 | $0.02 | $0.02 | | . 15 Change in Receivables | -$0.32 | -$0.32 | -$0.27 | -$0.28 | -$0.07 | -$0.18 | -$0.11 | -$0.11 | -$0.13 | -$0.03 | | . 16 Change in Prepaid Assets | -$0.26 | -$0.20 | -$0.12 | $0.01 | -$0.08 | -$0.05 | -$0.01 | -$0.04 | $0.01 | -$0.02 | | . 17 Change in Payables and Accrued Expense | $0.48 | $0.64 | $0.69 | $0.51 | $0.17 | $0.20 | $0.18 | $0.26 | $0.21 | $0.08 | | . 18 Change in Other Current Assets | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 19 Change in Other Current Liabilities | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 20 Change in Other Working Cap | -$0.43 | $0.03 | $1.30 | -$0.02 | -$0.02 | $0.00 | -$0.01 | $0.03 | -$0.01 | $0.02 | | . 21 Changes in Working Capital | -$0.54 | $0.14 | $1.59 | $0.21 | -$0.01 | -$0.03 | $0.05 | $0.14 | $0.08 | $0.05 | | . 22 Cash from Operations | $4.87 | $5.34 | $4.66 | $3.98 | $3.20 | $2.91 | $2.30 | $1.79 | $1.34 | $0.78 | | . 24 Cash Flow - Investing (Annual) | 12/1/2019 | 12/1/2018 | 12/1/2017 | 12/1/2016 | 12/1/2015 | 12/1/2014 | 12/1/2013 | 12/1/2012 | 12/1/2011 | 12/1/2010 | | . 25 Net Change in Capital Expenditures | -$0.37 | -$0.44 | -$0.29 | -$0.27 | -$0.17 | -$0.13 | -$0.08 | -$0.06 | -$0.05 | -$0.02 | | . 26 Sale of PPE | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 27 Net Change in PP&amp;E | -$0.37 | -$0.44 | -$0.29 | -$0.22 | -$0.17 | -$0.13 | -$0.08 | -$0.06 | -$0.05 | -$0.02 | | . 28 Net Change in Intangibles | $0.00 | $0.00 | $0.00 | -$0.05 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 29 Net Divestitures (Acquisitions) | -$0.01 | -$0.27 | -$0.55 | $0.00 | -$0.14 | -$2.50 | -$0.33 | -$0.03 | -$0.07 | -$0.11 | | . 30 Total Net Change in Investments | $7.43 | $2.93 | -$3.36 | -$3.06 | -$3.58 | $0.27 | -$1.74 | -$1.47 | -$0.79 | -$0.71 | | . 31 Net Other Investing Changes | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 32 Cash from Investing | $7.05 | $2.22 | -$4.20 | -$3.33 | -$3.90 | -$2.36 | -$2.16 | -$1.56 | -$0.90 | -$0.84 | | . 34 Cash Flow - Financing (Annual) | 12/1/2019 | 12/1/2018 | 12/1/2017 | 12/1/2016 | 12/1/2015 | 12/1/2014 | 12/1/2013 | 12/1/2012 | 12/1/2011 | 12/1/2010 | | . 35 Net Change in Long Term Debt | -$0.03 | -$1.46 | $1.76 | $1.00 | $2.25 | $2.14 | $0.56 | $1.00 | $0.00 | $0.28 | | . 36 Net Change in Short Term Debt | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 37 Net Debt Issuance | -$0.03 | -$1.46 | $1.76 | $1.00 | $2.25 | $2.14 | $0.56 | $1.00 | $0.00 | $0.28 | | . 38 Common Stock Issuance | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 39 Common Stock Payments | -$8.19 | -$5.97 | -$1.83 | -$1.01 | -$3.09 | -$0.75 | -$0.88 | -$0.26 | -$0.16 | -$0.13 | | . 40 Net Common Equity Issued (Purchased) | -$8.19 | -$5.97 | -$1.83 | -$1.01 | -$3.09 | -$0.75 | -$0.88 | -$0.26 | -$0.16 | -$0.13 | | . 41 Proceeds from Stock Option Exercised | $0.00 | $0.00 | $0.00 | $0.02 | $0.02 | $0.02 | $0.09 | $0.00 | $0.00 | $0.03 | | . 42 Cash from Other Financing Activities | -$0.01 | $0.00 | -$0.01 | $0.00 | -$0.01 | $0.02 | -$0.18 | -$0.08 | $0.01 | $0.04 | | . 43 Cash from Financing | -$8.22 | -$7.43 | -$0.08 | $0.00 | -$0.83 | $1.43 | -$0.40 | $0.67 | -$0.15 | $0.21 | | . 45 Ending Cash (Annual) | 12/1/2019 | 12/1/2018 | 12/1/2017 | 12/1/2016 | 12/1/2015 | 12/1/2014 | 12/1/2013 | 12/1/2012 | 12/1/2011 | 12/1/2010 | | . 46 Beginning Cash | $2.65 | $2.56 | $2.08 | $1.48 | $3.15 | $1.30 | $1.54 | $0.63 | $0.36 | $0.20 | | . 47 Change in Cash | $3.70 | $0.12 | $0.38 | $0.65 | -$1.52 | $1.99 | -$0.26 | $0.89 | $0.29 | $0.15 | | . 48 Cash Foreign Exchange Adjustment | -$0.01 | -$0.04 | $0.10 | -$0.05 | -$0.15 | -$0.14 | $0.02 | $0.01 | -$0.01 | $0.01 | | . 49 Ending Cash | $6.33 | $2.65 | $2.56 | $2.08 | $1.48 | $3.15 | $1.29 | $1.54 | $0.63 | $0.36 | | . 51 Additional Items (Annual) | 12/1/2019 | 12/1/2018 | 12/1/2017 | 12/1/2016 | 12/1/2015 | 12/1/2014 | 12/1/2013 | 12/1/2012 | 12/1/2011 | 12/1/2010 | | . 52 Issuance of Capital Stock | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 53 Issuance of Debt | $0.40 | $0.03 | $2.05 | $1.00 | $2.62 | $3.26 | $0.98 | $1.00 | $0.00 | $0.58 | | . 54 Debt Repayment | -$0.43 | -$1.49 | -$0.29 | $0.00 | -$0.37 | -$1.12 | -$0.41 | $0.00 | $0.00 | -$0.30 | | . 55 Repurchase of Capital Stock | -$8.19 | -$5.97 | -$1.83 | -$1.01 | -$3.09 | -$0.75 | -$0.88 | -$0.26 | -$0.16 | -$0.13 | | . 56 Income Tax Paid Supplemental Data | $1.07 | $1.17 | $0.70 | $0.64 | $0.53 | $0.49 | $0.39 | $0.30 | $0.23 | $0.17 | | . 57 Interest Paid Supplemental Data | $0.22 | $0.22 | $0.16 | $0.13 | $0.05 | $0.02 | $0.02 | $0.01 | $0.01 | $0.00 | | . Financial Analysis . Earnings Base Growth Rates . #collapse-hide income_g = booking_df_list[3][1] income_g_table = income_g cleaned = income_g_table[income_g_table.columns][:10] cleaned.columns cleaned . . Year Revenue Gross Profit Net Income EBITDA Revenue Growth AVG Revenue Growth Gross Profit Growth AVG Gross Profit Growth Net Income Growth AVG Net Income Growth EBITDA Growth AVG EBITDA Growth . 0 12/1/2019 | 15.07 | | 4.865 | 6.865 | 3.72% | 19.72% | | 31.50% | 21.69% | 31.89% | 24.14% | 28.70% | . 1 12/1/2018 | 14.53 | | 3.998 | 5.53 | 14.59% | 19.72% | | 31.50% | 70.78% | 31.89% | 10.25% | 28.70% | . 2 12/1/2017 | 12.68 | 12.44 | 2.341 | 5.016 | 18.06% | 19.72% | 20.43% | 31.50% | 9.65% | 31.89% | 55.29% | 28.70% | . 3 12/1/2016 | 10.74 | 10.33 | 2.135 | 3.23 | 16.44% | 19.72% | 20.23% | 31.50% | -16.31% | 31.89% | -9.30% | 28.70% | . 4 12/1/2015 | 9.224 | 8.592 | 2.551 | 3.561 | 9.26% | 19.72% | 13.29% | 31.50% | 5.33% | 31.89% | 8.37% | 28.70% | . 5 12/1/2014 | 8.442 | 7.584 | 2.422 | 3.286 | 24.27% | 19.72% | 32.68% | 31.50% | 27.95% | 31.89% | 31.55% | 28.70% | . 6 12/1/2013 | 6.793 | 5.716 | 1.893 | 2.498 | 29.12% | 19.72% | 39.96% | 31.50% | 33.31% | 31.89% | 32.24% | 28.70% | . 7 12/1/2012 | 5.261 | 4.084 | 1.42 | 1.889 | 20.78% | 19.72% | 32.60% | 31.50% | 34.47% | 31.89% | 30.01% | 28.70% | . 8 12/1/2011 | 4.356 | 3.08 | 1.056 | 1.453 | 41.20% | 19.72% | 61.34% | 31.50% | 100.17% | 31.89% | 75.76% | 28.70% | . 9 12/1/2010 | 3.085 | 1.909 | 0.52754 | 0.82669 | #DIV/0! | | | | #DIV/0! | | #DIV/0! | | . #collapse-hide columns = [&#39;Year&#39;,&#39;Revenue Growth&#39;, &#39;AVG Revenue Growth&#39;, &#39;Gross Profit Growth&#39;, &#39;AVG Gross Profit Growth&#39;, &#39;Net Income Growth&#39;, &#39;AVG Net Income Growth&#39;, &#39;EBITDA Growth&#39;, &#39;AVG EBITDA Growth&#39;] cleaned[columns] . . Year Revenue Growth AVG Revenue Growth Gross Profit Growth AVG Gross Profit Growth Net Income Growth AVG Net Income Growth EBITDA Growth AVG EBITDA Growth . 0 12/1/2019 | 3.72% | 19.72% | | 31.50% | 21.69% | 31.89% | 24.14% | 28.70% | . 1 12/1/2018 | 14.59% | 19.72% | | 31.50% | 70.78% | 31.89% | 10.25% | 28.70% | . 2 12/1/2017 | 18.06% | 19.72% | 20.43% | 31.50% | 9.65% | 31.89% | 55.29% | 28.70% | . 3 12/1/2016 | 16.44% | 19.72% | 20.23% | 31.50% | -16.31% | 31.89% | -9.30% | 28.70% | . 4 12/1/2015 | 9.26% | 19.72% | 13.29% | 31.50% | 5.33% | 31.89% | 8.37% | 28.70% | . 5 12/1/2014 | 24.27% | 19.72% | 32.68% | 31.50% | 27.95% | 31.89% | 31.55% | 28.70% | . 6 12/1/2013 | 29.12% | 19.72% | 39.96% | 31.50% | 33.31% | 31.89% | 32.24% | 28.70% | . 7 12/1/2012 | 20.78% | 19.72% | 32.60% | 31.50% | 34.47% | 31.89% | 30.01% | 28.70% | . 8 12/1/2011 | 41.20% | 19.72% | 61.34% | 31.50% | 100.17% | 31.89% | 75.76% | 28.70% | . 9 12/1/2010 | #DIV/0! | | | | #DIV/0! | | #DIV/0! | | . Earnings Base Historical Growth Rates . #collapse-hide # select a point for which to provide details-on-demand # label = alt.selection_single( # encodings=[&#39;x&#39;], # limit selection to x-axis value # on=&#39;mouseover&#39;, # select on mouseover events # nearest=True, # select data point nearest the cursor # empty=&#39;none&#39; # empty selection includes no data points # ) label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;Value:Q&#39;) , color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) # alt.Color(&#39;Metric:N&#39;), opacity = alt.condition(label, alt.value(1), alt.value(0.5)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . . Earnings Base Historical Growth in Growth Rates (Natural Log) . #collapse-hide #Take natural logs df[&#39;log Value&#39;] = np.around(np.log(df[&#39;Value&#39;]), 4) # select a point for which to provide details-on-demand label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;log Value:Q&#39;), color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(title=&quot;Log Growth Rate&quot;, labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . . /usr/local/lib/python3.6/dist-packages/pandas/core/series.py:679: RuntimeWarning: invalid value encountered in log result = getattr(ufunc, method)(*inputs, **kwargs) . Costs Strucutres over Time . #collapse-hide columns = [&#39;Year&#39;, &#39;Operating Revenue&#39;, &#39;Total Operating Expenses&#39;, &#39;Operating Income&#39;] cleaned = cleaned[columns] cleaned . . Year Operating Revenue Total Operating Expenses Operating Income . 11 12/1/2019 | $15.07 | $9.72 | $5.35 | . 12 12/1/2018 | $14.53 | $9.19 | $5.34 | . 13 12/1/2017 | $12.68 | $7.90 | $4.54 | . 14 12/1/2016 | $10.74 | $6.48 | $3.85 | . 15 12/1/2015 | $9.22 | $5.33 | $3.26 | . 16 12/1/2014 | $8.44 | $4.51 | $3.07 | . 17 12/1/2013 | $6.79 | $3.30 | $2.41 | . 18 12/1/2012 | $5.26 | $2.25 | $1.83 | . 19 12/1/2011 | $4.36 | $1.68 | $1.40 | . 20 12/1/2010 | $3.09 | $1.12 | $0.79 | . #collapse-hide # select a point for which to provide details-on-demand # label = alt.selection_single( # encodings=[&#39;x&#39;], # limit selection to x-axis value # on=&#39;mouseover&#39;, # select on mouseover events # nearest=True, # select data point nearest the cursor # empty=&#39;none&#39; # empty selection includes no data points # ) label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;Value:Q&#39;) , color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) # alt.Color(&#39;Metric:N&#39;), opacity = alt.condition(label, alt.value(1), alt.value(0.5)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . . #collapse-hide #Take natural logs df[&#39;log Value&#39;] = np.around(np.log(df[&#39;Value&#39;]), 4) # select a point for which to provide details-on-demand label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;log Value:Q&#39;), color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(title=&quot;Growth Rate&quot;, labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . . Balance Sheet Trends . Balance Sheet Historical Growth Rates . #collapse-hide cleaned . . Year Cash and Equivalents Total Liabilities Total Assets Liabilities/Assets . 0 12/1/2019 | 6.312 | 15.47 | 21.4 | 0.722897 | . 1 12/1/2018 | 2.624 | 13.9 | 22.69 | 0.612605 | . 2 12/1/2017 | 2.542 | 14.19 | 25.45 | 0.557564 | . 3 12/1/2016 | 2.081 | 10.02 | 19.84 | 0.50504 | . 4 12/1/2015 | 1.477 | 8.625 | 17.42 | 0.495121 | . 5 12/1/2014 | 3.149 | 6.204 | 14.77 | 0.420041 | . 6 12/1/2013 | 1.29 | 3.535 | 10.44 | 0.338602 | . 7 12/1/2012 | 1.536 | 2.673 | 6.57 | 0.406849 | . 8 12/1/2011 | 0.63284 | 1.396 | 3.971 | 0.351549 | . 9 12/1/2010 | 0.35897 | 1.047 | 2.906 | 0.360289 | . #collapse-hide #Take natural logs df[&#39;log Value&#39;] = np.around(np.log(df[&#39;Value&#39;]), 4) # df[&#39;log Value&#39;] = np.around(np.log(df[&#39;log&#39;]), 4) # select a point for which to provide details-on-demand label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;log Value:Q&#39;), color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(title=&quot;Growth Rate&quot;, labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . . Balance Sheet Historical Growth in Growth Rates . #collapse-hide #Take natural logs df[&#39;log&#39;] = np.around(np.log(df[&#39;Value&#39;]), 4) # df[&#39;log Value&#39;] = np.around(np.log(df[&#39;log&#39;]), 4) # select a point for which to provide details-on-demand label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;log Value:Q&#39;), color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(title=&quot;Log Growth Rate&quot;, labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . . #collapse-hide #Take natural logs df[&#39;log&#39;] = np.around(np.log(df[&#39;Value&#39;]), 4) df[&#39;log Value&#39;] = np.around(np.log(df[&#39;log&#39;]), 4) # select a point for which to provide details-on-demand label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;log Value:Q&#39;), color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(title=&quot;Log Growth Rate&quot;, labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . . /usr/local/lib/python3.6/dist-packages/pandas/core/series.py:679: RuntimeWarning: invalid value encountered in log result = getattr(ufunc, method)(*inputs, **kwargs) . DCF Valuation . Model Choice . We chose a n-period FCFF so we could model special situations such as the current slowdown and value the firm at a longer time period. . #collapse-hide inputs = FCFF_inputs_outputs[:26][[&#39;Current Inputs&#39;, &#39;($ in Billions)&#39;]] inputs[&#39;Current Inputs&#39;] = inputs[&#39;Current Inputs&#39;].str.rstrip(&#39;=&#39;) inputs.set_index(&quot;Current Inputs&quot;) outputs = FCFF_inputs_outputs[:5][[ &#39;Year&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;]].transpose() outputs.columns = (outputs.iloc[0]) outputs.drop(outputs.index[0], inplace=True) # outputs . . Inputs . #collapse-hide inputs . . Current Inputs ($ in Billions) . 0 Enter the current revenues of the firm | $ 15.0700 | . 1 Enter current capital invested in the firm | $ 36.8700 | . 2 Enter the current depreciation | $ 0.6410 | . 3 Enter the current capital expenditures for the... | $ 0.2730 | . 4 Enter the change in Working Capital in last year | $ (0.4330) | . 5 Enter the value of current debt outstanding | $ 15.4700 | . 6 Enter the number of shares outstanding | $ 0.0411 | . 7 | | . 8 High Growth Period | | . 9 Enter the growth rate after 5 years | 15.00% | . 10 What will all operating expenses be as a % of ... | 60.46% | . 11 How much debt do you plan to use in financing ... | 29% | . 12 Enter the growth rate in capital expenditures ... | 27.11% | . 13 Enter working capital as a percent of revenues | 39.35% | . 14 Enter the tax rate that you have on corporate ... | 18.00% | . 15 What beta do you want to use to calculate cost... | 1.28 | . 16 Enter the current long term bond rate | 0.64% | . 17 Enter the market risk premium you want to use | 5.70% | . 18 Enter your cost of borrowing money | 1.77% | . 19 Stable Period | | . 20 Enter the growth rate in revenues | 2.00% | . 21 Enter operating expenses as a % of revenues in... | 64.51% | . 22 Enter capital expenditures as a percent of dep... | 42.59% | . 23 How much debt do you plan to use in financing ... | 27% | . 24 Enter interest rate of debt in stable period | 1.70% | . 25 What beta do you want to use in the stable per... | 1.28 | . Output and Forecasts . #collapse-hide marketD price = marketD.iloc[1][&#39;Value&#39;] print(price) outputs[&#39;Current Price&#39;] = price outputs . . 1,271.630 . Year Value of Firm $ Value of Debt Shares outstanding Firm Value Per Share Equity Value Per Share Current Price . 1 131.738 | 38.125 | 0.041 | 3,208.269 | 2279.8 | 1,271.630 | . 2 133.75 | 38.707 | 0.041 | 3,257.263 | 2314.61 | 1,271.630 | . 3 139.41 | 40.345 | 0.041 | 3,395.110 | 2412.57 | 1,271.630 | . 4 144.815 | 41.909 | 0.041 | 3,526.748 | 2506.11 | 1,271.630 | . 5 149.864 | 43.37 | 0.041 | 3,649.696 | 2593.48 | 1,271.630 | . 6 154.451 | 44.131 | 0.041 | 3,761.405 | 2686.65 | 1,271.630 | . 7 158.496 | 44.706 | 0.041 | 3,859.911 | 2771.17 | 1,271.630 | . 8 162.119 | 45.133 | 0.041 | 3,948.152 | 2849 | 1,271.630 | . 9 165.437 | 45.451 | 0.041 | 4,028.964 | 2922.09 | 1,271.630 | . 10 168.648 | 45.714 | 0.041 | 4,107.162 | 2993.87 | 1,271.630 | . #collapse-hide estimated_cash_flows . . Year 0 1 2 3 4 5 6 7 8 9 10 . 0 Growth in Revenue | | -60.00% | 22.80% | 20.20% | 17.60% | 15.00% | 12.40% | 9.80% | 7.20% | 4.60% | 2.00% | | . 1 Growth in Deprec&#39;n | | 27.11% | 27.11% | 27.11% | 27.11% | 27.11% | 27.11% | 17.06% | 12.04% | 7.02% | 2.00% | | . 2 Revenues | 15.07 | 6.028 | 7.40238 | 8.89767 | 10.4636 | 12.0332 | 13.5253 | 14.8508 | 15.9201 | 16.6524 | 16.9854 | | . 3 Operating Expenses | | | | | | | | | | | | | . 4 % of Revenues | 60.46% | 60.46% | 60.46% | 60.46% | 60.46% | 60.46% | 61.27% | 62.08% | 62.89% | 63.70% | 64.51% | | . 5 - $ Operating Expenses | 9.112 | 3.6448 | 4.47581 | 5.37993 | 6.3268 | 7.27582 | 8.28733 | 9.21952 | 10.012 | 10.6071 | 10.9566 | | . 6 EBIT | 5.958 | 2.3832 | 2.92657 | 3.51774 | 4.13686 | 4.75739 | 5.23799 | 5.63128 | 5.90806 | 6.04525 | 6.02887 | | . 7 Tax Rate | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | | . 8 | | | | | | | | | | | | | . 9 EBIT (1-t) | 4.88556 | 1.95422 | 2.39979 | 2.88454 | 3.39222 | 3.90106 | 4.29515 | 4.61765 | 4.84461 | 4.9571 | 4.94367 | | . 10 + Depreciation | 0.641 | 0.81475 | 1.0356 | 1.31631 | 1.67311 | 2.12663 | 2.70308 | 3.16433 | 3.54539 | 3.79432 | 3.87021 | | . 11 - Capital Expenditures | 0.273 | 0.347 | 0.44106 | 0.56061 | 0.71257 | 0.90573 | 1.05424 | 1.20276 | 1.35128 | 1.49979 | 1.64831 | | . 12 - Change in WC | -0.433 | -3.558 | 0.54082 | 0.58839 | 0.61621 | 0.61761 | 0.58714 | 0.52157 | 0.42075 | 0.28817 | 0.13105 | | . 13 = FCFF | 5.68656 | 5.97997 | 2.45351 | 3.05185 | 3.73655 | 4.50435 | 5.35684 | 6.05765 | 6.61798 | 6.96346 | 7.03452 | | . 14 Terminal Value | | | | | | | | | | | 172.021 | 4.17% | . #collapse-hide cost_of_equityNcapital . . Year 1 2 3 4 5 6 7 8 9 10 . 0 Cost of Equity | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | . 1 Proportion of Equity | 71.06% | 71.06% | 71.06% | 71.06% | 71.06% | 71.43% | 71.79% | 72.16% | 72.53% | 72.89% | . 2 After-tax Cost of Debt | 1.45% | 1.45% | 1.45% | 1.45% | 1.45% | 1.44% | 1.43% | 1.42% | 1.40% | 1.39% | . 3 Proportion of Debt | 28.94% | 28.94% | 28.94% | 28.94% | 28.94% | 28.57% | 28.21% | 27.84% | 27.47% | 27.11% | . 4 Cost of Capital | 6.07% | 6.07% | 6.07% | 6.07% | 6.07% | 6.09% | 6.11% | 6.13% | 6.15% | 6.17% | . 5 Cumulative WACC | 106.07% | 112.50% | 119.33% | 126.56% | 134.24% | 142.41% | 151.11% | 160.37% | 170.24% | 180.74% | . 6 Present Value | 5.63795 | 2.18088 | 2.55759 | 2.95229 | 3.35539 | 3.76146 | 4.0087 | 4.12659 | 4.09045 | 99.0666 | . 7 Terminal Value | | | | | | | | | | | . Economic Value Added (EVA) FCFF . #collapse-hide EVA_output[:8] . . Year 0 1 2 3 4 5 6 7 8 9 10 Terminal Year . 0 EBIT (1-t) | $ 4.88556 | $ 1.95422 | $ 2.39979 | $ 2.88454 | $ 3.39222 | $ 3.90106 | $ 4.29515 | $ 4.61765 | $ 4.84461 | $ 4.95710 | $ 4.94367 | $ 5.04255 | | . 1 - WACC (CI) | | $ 2.23668 | $ 1.99246 | $ 1.98920 | $ 1.97905 | $ 1.95817 | $ 1.92815 | $ 1.86991 | $ 1.78807 | $ 1.68514 | $ 1.56710 | $ (6.58045) | | . 2 EVA | | $ (0.28246) | $ 0.40732 | $ 0.89534 | $ 1.41317 | $ 1.94289 | $ 2.36700 | $ 2.74774 | $ 3.05655 | $ 3.27196 | $ 3.37657 | $ 11.62300 | | . 3 Terminal EVA | | | | | | | | | | | $ 278.65432 | | | . 4 PV | | $ (0.26630) | $ 0.36206 | $ 0.75033 | $ 1.11656 | $ 1.44730 | $ 1.66206 | $ 1.81834 | $ 1.90588 | $ 1.92200 | $ 156.03997 | | | . 5 WACC | | 6.07% | 6.07% | 6.07% | 6.07% | 6.07% | 6.09% | 6.11% | 6.13% | 6.15% | 6.17% | 6.17% | | . 6 ROC | | 5.30% | 7.31% | 8.80% | 10.40% | 12.09% | 13.56% | 15.08% | 16.61% | 18.09% | 19.47% | -4.73% | | . 7 Capital Invested | | $ 37 | $ 33 | $ 33 | $ 33 | $ 32 | $ 32 | $ 31 | $ 29 | $ 27 | $ 25 | $ (107) | (Adjusted to reflect terminal ROC) | . Calculation of Capital Invested . #collapse-hide EVA_output[9:14] . . Year 0 1 2 3 4 5 6 7 8 9 10 Terminal Year . 9 Initial | $ 36.870 | $ 36.870 | $ 32.844 | $ 32.791 | $ 32.623 | $ 32.279 | $ 31.676 | $ 30.614 | $ 29.174 | $ 27.401 | $ 25.394 | | | . 10 + Net Cap Ex | | $ (0.468) | $ (0.595) | $ (0.756) | $ (0.961) | $ (1.221) | $ (1.649) | $ (1.962) | $ (2.194) | $ (2.295) | $ (2.222) | | | . 11 + Chg in WC | | $ (3.5580) | $ 0.5408 | $ 0.5884 | $ 0.6162 | $ 0.6176 | $ 0.5871 | $ 0.5216 | $ 0.4207 | $ 0.2882 | $ 0.1311 | | | . 12 Ending | $ 36.870 | $ 32.844 | $ 32.791 | $ 32.623 | $ 32.279 | $ 31.676 | $ 30.614 | $ 29.174 | $ 27.401 | $ 25.394 | $ 23.303 | | | . 13 Cumulated WACC | | 106.07% | 112.50% | 119.33% | 126.56% | 134.24% | 142.41% | 151.11% | 160.37% | 170.24% | 180.74% | | | . Relative Valuation . Peer Sample Cross Section . #collapse-hide peer_book = get_sheets_as_dfs(&#39;Bookings Peer Analysis&#39;) print(len(peer_book)) %clear . . Could not get &lt;Worksheet &#39;Chart4&#39; id:1060738748&gt; This is probably a graph Could not get &lt;Worksheet &#39;Chart3&#39; id:295439058&gt; This is probably a graph Could not get &lt;Worksheet &#39;Chart2&#39; id:1880232164&gt; This is probably a graph 4 . #collapse-hide peers = peer_book[0][1] cleaned = peers[peers.columns][:4] compTable = cleaned fw = peer_book[1][1] cleaned = fw[[&#39;Ticker&#39;,&#39;2020&#39;, &#39;2021&#39;, &#39;2022&#39;, &#39;2023&#39;, &#39;2024&#39;, &#39;2025&#39;, &#39;Implied Return&#39;, &#39;Model Base&#39;]][:13] modelOutput = cleaned compTable . . Name Symbol Gross Profit Margin Operating Margin (ttm) EBITDA MArgin (ttm) Profit Margin Return on Invested Capital Return on Equity Dividend Yield EV to EBITDA Price to Book Value PEG Ratio PE5 PE 10 PE Ratio Forward PE Relative PE Sector Relative PE Market Relative PE Ratio (Indust. Quick Ratio Current Ratio Normalized Diluted EPS (TTM) . 0 Booking Holdings Inc | BKNG | | 35.48% | 45.57% | 32.29% | 32.04% | 73.96% | 0.00% | 7.699 | 8.687 | 0.3179 | 20.59 | 29.14 | 11.15 | 17.78 | 0.8376 | 0.7703 | 1.649 | 1.6750 | 1.832 | 99.330 | . 1 Expedia Group Inc | EXPE | 82.08% | 7.68% | 15.40% | 4.68% | 5.71% | 13.66% | 2.23% | 5.958 | 2.118 | 0.3807 | 19.01 | 21.23 | 16.01 | 137.20 | 1.2030 | 1.1060 | 2.368 | 0.6006 | 0.722 | 3.993 | . 2 TripAdvisor Inc | TRIP | 93.98% | 12.04% | 21.14% | 8.07% | 8.56% | 8.56% | 0.00% | 6.440 | 2.105 | 2.0430 | 23.04 | | 20.18 | 14.33 | 1.5160 | 1.3940 | 2.985 | 1.5400 | 1.225 | 0.890 | . Forward Valuation With Various Ratios as Bases . #collapse-hide modelOutput #Stack Dataframes For Charting byYear = modelOutput[[&#39;Ticker&#39;,&#39;2020&#39;, &#39;2021&#39;, &#39;2022&#39;, &#39;2023&#39;, &#39;2024&#39;, &#39;2025&#39;, &#39;Model Base&#39;]].set_index([&#39;Model Base&#39;, &quot;Ticker&quot;]).stack() byYear df = pd.DataFrame(byYear, columns=[ &#39;Value&#39;]) df[&#39;Value&#39;] = pd.to_numeric(df[&#39;Value&#39;], errors=&#39;raise&#39;) df df.reset_index(inplace=True) df df.rename(columns={&quot;level_2&quot;:&#39;Year&#39;}, inplace=True) df.set_index(&#39;Model Base&#39;) price = df.Value[0] df[df[&quot;Year&quot;]==&#39;2020&#39;] aa = list(df.loc[df[&#39;Year&#39;] == &#39;2020&#39;, &#39;Value&#39;]) print(aa) df conditions = [ (df[&#39;Ticker&#39;] == &#39;BKNG&#39;), (df[&#39;Ticker&#39;] == &#39;EXPE&#39;), (df[&#39;Ticker&#39;] == &#39;TRIP&#39;)] choices = [float(aa[0]),float(aa[1]),float(aa[2])] df[&#39;CurrentPrice&#39;] = np.select(conditions, choices) df df[&#39;Return&#39;] = (df.Value - df.CurrentPrice).div(df.CurrentPrice) # df.dropna(inplace=True) # df[~df.Value.str.contains(&quot;#DIV/0!&quot;)] # df[~df.Year.str.contains(&quot;12/1/2010&quot;)] # df.set_index(&#39;Metric&#39;) # df . . [1271.63, 52.0, 16.67, 1271.63, 52.0, 16.67, 1271.63, 52.0, 16.67, 1271.63, 52.0, 16.67] . #collapse-hide source = df # label = alt.selection_multi(fields=[&#39;Ticker&#39;], bind=&#39;legend&#39;, # on=&#39;mouseover&#39;, # select on mouseover events # nearest=True, # select data point nearest the cursor # empty=&#39;none&#39; # empty selection includes no data points # ) # alt.Chart(source).mark_bar().encode( # x=&#39;Year:T&#39;, # y=&#39;Upside:Q&#39;, # color = alt.Color(&#39;Ticker:N&#39;, legend=alt.Legend(title=&quot;Ticker&quot;, labelFontSize=15, titleFontSize=17),scale=alt.Scale(scheme=&#39;tableau20&#39;)), # column=&#39;Model Base:N&#39; # ) # bars = alt.Chart(source).mark_bar().encode( # x=alt.X(&#39;average(Return):Q&#39;, stack=&#39;zero&#39;), # y=alt.Y(&#39;Ticker:N&#39;), # color=alt.Color(&#39;Model Base&#39;) # ) # text = alt.Chart(source).mark_text(dx=-15, dy=3, color=&#39;white&#39;).encode( # x=alt.X(&#39;average(Return):Q&#39;, stack=&#39;zero&#39;), # y=alt.Y(&#39;Ticker:N&#39;), # detail=&#39;Model Base:N&#39;, # text=alt.Text(&#39;average(Return):Q&#39;, format=&#39;.1f&#39;) # ) # bars + text alt.Chart(source).mark_bar().encode( column = &quot;Ticker&quot;, x=&#39;Year&#39;, y=&#39;Return&#39;, color=&#39;Model Base&#39;).properties(width=220) . . Investment Summary and Proposal . #collapse-hide # marketD.set_index(&#39;Variable&#39;) marketD . . Variable Value . 0 ticker | BKNG | . 1 Price | 1,271.630 | . 2 52 Week High | 2,094.000 | . 3 52 Week Low | 1,107.290 | . 4 Beta (Unlevered) | 0.95 | . 5 Mkt Cap (Billions $) | 52.215 | . 6 EPS | 111.43 | . 7 Shares Outstanding (Billions) | 0.041062 | . 8 1Y Target | 2279.8 | . 9 5Y Target | 2686.65 | . 10 % Upside (1Y) | 79.28% | . 11 % Upside (5Y) | 111.28% | . Recommendation: . We recommend a BUY on BKNG. We expect volatility to continue over the next two weeks; therefore, we would like to use a tailored entry to capitalize on these movements. We propose placing a limit order for three shares of BKNG at 1000 dollars per share. We want to place a stop BUY at 1400 dollars per share. For those who dont know what that means: we would not buy BKNG unless it hit 1000 or 1400 dollars per share. . Thesis . Bookings Holdings is a quality company trading almost 50% off of 52-Week Highs. We believe that BKNG wins coming out of this recession and currently attractive at these prices on a relative and DCF valuation basis. We think that BKNG&#39;s period of rapid revenue growth approaches an end, however, after a massive decline in revenues this year, we anticipate BKNG converging back to a steady 2% revenue growth rate over ten years. . Why Now: The Coronavirus impacted and continues to impact the economy at an unprecedented level. Unlike the Great Depression, the Great Recession and other recessions, the Coronavirus upheaval has brought the global economy to a full halt. Economic indicators over the next few weeks will likely be some of the worst readings in the history of US economic account records. But under the presumption that the crises will eventually end, either through a vaccine or herd immunity, we decided to explore the wreckage that is the travel industry in search of pockets of value and mispriced names. Staying away from airlines, we turned to travel intermediaries and hospitality stocks and settled on a peer sample of companies who leverage technology. . | Why Bookings: Bookings would complement our portfolio as a multibillion-dollar, global, US-based technology company with many subsidiaries, including Booking.com, Priceline.com, Agoda.com, Kayak.com, Cheapflights, Rentalcars.com, Momondo, and OpenTable. They have a reputation for market dominance in hotel bookings. Additionally, Bookings aggressively expanded their operations using their fluency in information technology and hospitality to include restaurant reservations systems internationally. Bookings earnings have steadily increased in the past, and have room to continue as they expand. . | Why Bookings now: Models, incorporating worst-case scenarios for economic slowdowns, predict not only Bookings&#39; survival as a company due to high margins, but also future growth. The consistent revenue they bring in as a dynamic company sustains the company through black swan events like the Coronavirus while maintaining positive outlooks for the future. As an online intermediary for travelers, hotels, and restaurants, Bookings&#39;s exposure is lower than other hospitality industries that had sold off recently, such as airlines, cruise lines, amusement parks, hotels, and food services. They have fewer employees and have the technological flexibility to afford periods of stagnation in development. BKNG is trading at historically low prices compared to fundamental value and presents a significant opportunity to add a travel industry behemoth to our portfolio and take advantage of the extreme pessimism, and volatility equity markets are currently experiencing. . | . Brief Industry Overview . Traveling requires planning trips; not too long ago, consumers relied on travel agencies to serve that function. Technology made that obsolete by allowing consumers to plan their travels. With the rise of the internet and social media, consumers can access information, decide where they want to go and compare prices themselves. They also have more modes of transportation via ride-sharing apps, higher volume, and scope of airline flights in general improvements in global infrastructure. . These technological advancements create more efficient markets for travelers and do most of the heavy lifting when it comes to contract matching and sales. It is no wonder that Tourism, hospitality, and circularly, industries have newfound reliance on information technology. . Bookings provide much of this information in one place, on any of their given websites. Travel technology demand by consumers and businesses rises along with new applications for travel technology. This demand is mainly satisfied with Bookings, the largest travel technology company in the world. . Brief Peer Overview . Bookings&#39; competitors include Expedia, Trip.com, and TripAdvisor. Expedia with a market cap of 8.8B includes CarRentals.com, Expedia.com, Hotels.com, Orbitz and Travelocity. Trip.com with a cap of 13.8B includes Airfarewatchdog, Bookingbuddy.com, Holidaylettings.co.uk, and Jetsetter.com. TripAdvisor, with a market cap of 2.4B receives a significant portion of their revenue from Bookings and Expedia. For comparison, Bookings has a market cap of $51.5B. Bookings outperforms its competitors in almost all performance markers. . Business Description . Booking Holdings Inc. provides online travel and related services in Europe, North America, South America, the Asia-Pacific region, the Middle East, and Africa. The company operates Booking.com, which connects travelers with a selection of places to stay, including apartments, vacation homes, family-run B&amp;Bs, 5-star luxury resorts, tree houses, and igloos; and KAYAK that searches other sites to show travelers the information they need to find the right flights, hotels, rental cars, and vacation packages. It also operates Priceline, an online travel deal service, which provides travelers to save on hotel rooms, airline tickets, rental cars, vacation packages, and cruises; Agoda, which provides online accommodation reservation services. In addition, the company operates Rentalcars.com that offers online rental car reservation services; and OpenTable, an online provider of restaurant reservation and information services to consumers and restaurant reservation management, as well as customer acquisition services to restaurants. Further, it offers travel insurance products. The company was formerly known as The Priceline Group Inc. and changed its name to Booking Holdings Inc. in February 2018. Booking Holdings Inc. was founded in 1997 and is headquartered in Norwalk, Connecticut. (Source: Finviz) . Revenue Drivers . Agency, merchant and advertising operations drive Bookings&#39; revenue. Their main source of revenue comes from acting as an online travel agency booking hotels, car rentals and restaurant reservations with commissions. Their second source derives from their role as a merchant, selling reservations at hotels, car rentals and restaurant reservations. Bookings also receives revenue from traditional advertising on it&#39;s websites. . Sustainability and Governance . Yahoo ESG rating is 19/100, quantified using data of 120 environmental, social and governance indicators including: carbon emissions, climate change effect, pollution, waste disposal, renewable energy, resource depletion, supply chain, political contributions, discrimination, diversity, community relations, human rights, cumulative voting, executive compensation, shareholders&#39; rights, takeover defense, staggered boards, and independent directors. ESG rating will penalize companies for &quot;missing data.&quot; A low score signals less risk in governance and social-environmental impact. The anti-competitive nature of Bookings indicates its success as a capitalist company as much as their disrespect for fair play in markets. Business informs Bookings political opinions, evidenced by their support for the illegal Israeli occupation of Palestine. . Risks . The beautiful thing about this idea is the company is experiencing a worst-case scenario. Economic activity will grind to a halt, and revenues will be impacted. We expect BKNG&#39;s revenues to decline modestly, and the DCF models account for this in the 60% decline in topline built into the first year. One risk might be that recent events might change consumer behavior in the travel sector, and revenue streams might be dampened for the foreseeable future. Additionally, more than half of revenues are reservations and travel insurance--massive amounts of travel insurance claims might drain cash flows in ways our models do not anticipate. .",
            "url": "https://albisbub.github.io/RFIC-Pitches/bkng/",
            "relUrl": "/bkng/",
            "date": " • Apr 1, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://albisbub.github.io/RFIC-Pitches/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://albisbub.github.io/RFIC-Pitches/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}