{
  
    
        "post0": {
            "title": "RFIC MEETING 6",
            "content": ". #hide-input import numpy as np import pandas as pd import matplotlib.pyplot as plt import altair as alt from datetime import timedelta, datetime, date %config InlineBackend.figure_format = &#39;retina&#39; chart_width = 550 chart_height= 400 import gspread from oauth2client.service_account import ServiceAccountCredentials pd.set_option(&#39;display.max_rows&#39;, 500) pd.set_option(&#39;display.max_columns&#39;, 500) pd.set_option(&#39;display.width&#39;, 1000) . #hide-input client_sec = { &quot;type&quot;: &quot;service_account&quot;, &quot;project_id&quot;: &quot;peppy-nation-255220&quot;, &quot;private_key_id&quot;: &quot;94da5550dc920fac1e281634e7e90ec11eec581c&quot;, &quot;private_key&quot;: &quot;--BEGIN PRIVATE KEY-- nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDJiZhCEI5TVccR nwXf+S8tWvX+phjEDcUtV7SvTPiiiFVWu/NNdpd/xS9AQzU2w9gJs0RrWAMG6WNGX nHIZQoOx9aKdWUH6Rb6TsyK2sD8Ldd+np0GIbMwjIpFZ3IaVHnQOXY4MnJjyENzks nlZZaIkOqfOHvJtGoNMxGufupTAA5+QzKhyuyEa8vpNvrID32lib5NgOxyjQzpk+w nA5KEd/WOT8IK6pvIPEdB1qDk+P7Jqxa3mJBLnDNuqDBz4QeIr8DuGZOvql+B0s+1 nACFY+ZZWyL4G5HwZSk1vtdxwKNYD336H63kofP9mhkY56ykZjAcAxsoK7dIeYlW7 nR/joq3tVAgMBAAECggEAOOIKpP7qRPAtfz/1f8Nh0Yor2avD8r5L7qVB3N4q9tCB nviGjAMgcJI1q3QstVfihp5f/dI6DH3cJNRb6fBBnn1/l9zFCAAeca66agjlynTLG nxVUpE5c8b/EebIKFFWjmRhjywB6FLyYtD33rEWahZaHY3Ti+LTU1wPKmatrGJ5Y4 n2NmEJAPZUTTjleJKlTCvQjliA5/2sku6c+/S+1D9nw5QRiYG9j0I8oTSK3xO8mdX n+zYR/V1k3bVQpD05dYnTZ/uWYIirtSSyKx1VXraxlaEa1POTOAs/4kZaByqtHys0 n0gz33vgma1R2otHMmVlhCbr+7IL+frjO0+aLUTwp4wKBgQDu615F7VRMtu7Gwoc1 nMPrT9g+Wts93O9unpejmfwhaxVDBGg2C/Qn/jMPtJdLcq8+/zcXcUUc3zLqQC2wy nyqdc6y9mPmhS2bdkvizFjV9WmDWkLl9s+yqKbzvlerD8YY0Mpb97FhxOD6b5DAD3 nRaC0q1+tMx4eB4JDTkqNjC0nTwKBgQDX8hLYFmh1qNYDhB8ZmCWB7iAo8bwdruKU n8f+d0BWSPtJE6IAUIgwrfow9Ziq3E8/jhGJbPtcSsCVhxpM9tLi8q9QXXcx4ii4Y n3Nr6QJ3LdW+hXQlIAQ+leXlGgl4OS9qbYp065CjiugO/svMtgDeLnVkZCz2nJzV4 nHfXFGdzKGwKBgQCFgRYbwwNhHrOMczT0Xxs6B/wr/pktilAyfP4IlqGHf0yhqro0 nIMtOdk0hHgqW7pbXGdffRbejEY6KYSejtiQRQwYofuTyrt/Qtof0GAxXKhSHWrZO nAoeB9aglkgqF7MjRcWjvEardX9ewwKllgw3LBxwefzrsEswSahQ0xkiQ9wKBgQCQ nmhQOSOsIJtewoQ9mRyCOodM9N6pdQheN34LovUdEl/abmAjz8lyt316vWrOtxoGF n+8cVDL5eUD+n+p3sSxENng4222OpL/ZwRawIua4waOIobrFhWvyMNQyFr5SmBBtN nw7o/jjrmn+MUwhLe3CXVwra/82wEe1ftqDpEEu5rEwKBgQDWjldiA0mHpM1aKEpd nh5cdVPvuNgWbrUu0zGOJ+SVkmgz3XZZ/xRYzWcznbZrs7USm7/vvAkIUINS2TH1W nN2rlhhhRHQnhYwDH3hvFJ/RU6uY/TddebKnJG8h2gsYuCG/baqqFJf2Rpjv69AEk n8ynOQayzfl6/3gOev2YRfJccLw== n--END PRIVATE KEY-- n&quot;, &quot;client_email&quot;: &quot;cfa-challenge@peppy-nation-255220.iam.gserviceaccount.com&quot;, &quot;client_id&quot;: &quot;114091374061235835252&quot;, &quot;auth_uri&quot;: &quot;https://accounts.google.com/o/oauth2/auth&quot;, &quot;token_uri&quot;: &quot;https://oauth2.googleapis.com/token&quot;, &quot;auth_provider_x509_cert_url&quot;: &quot;https://www.googleapis.com/oauth2/v1/certs&quot;, &quot;client_x509_cert_url&quot;: &quot;https://www.googleapis.com/robot/v1/metadata/x509/cfa-challenge%40peppy-nation-255220.iam.gserviceaccount.com&quot; } . #hide-input def get_sheets_as_dfs(sheetName): # use creds to create a client to interact with the Google Drive API scope = [&#39;https://spreadsheets.google.com/feeds&#39;, &#39;https://www.googleapis.com/auth/drive&#39;] creds = ServiceAccountCredentials.from_json_keyfile_dict(client_sec, scope) client = gspread.authorize(creds) # Find a workbook by name and open the first sheet # Make sure you use the right name here. book = client.open(sheetName) worksheet_list = book.worksheets() dfs = [] # Extract and print all of the values counter = 0 for i in worksheet_list: try: current = book.get_worksheet(counter) list_of_hashes = current.get_all_records() liveData = pd.DataFrame.from_records(list_of_hashes) tuple = (i,liveData) dfs.append(tuple) except BaseException as e: print(&quot;Could not get&quot;, i, &quot;This is probably a graph&quot;) counter += 1 return dfs . #hide-input #Fetch data from booking exploratory analysis google sheet. booking_df_list = get_sheets_as_dfs(&quot;Booking&quot;) %clear . Could not get &lt;Worksheet &#39;Growth Rates C&#39; id:1671501091&gt; This is probably a graph Could not get &lt;Worksheet &#39;Liabs/Assets Growth C&#39; id:779597323&gt; This is probably a graph Could not get &lt;Worksheet &#39;Balance Sheet Growth C&#39; id:1025699751&gt; This is probably a graph Could not get &lt;Worksheet &#39;Assets v Liabs C&#39; id:164761733&gt; This is probably a graph . Financial Statements (Billions) . Income Statement . #hide-input income = booking_df_list[0][1] income_table = income.drop_duplicates(keep=False) income_table[income.columns] . Year 12/1/2019 12/1/2018 12/1/2017 12/1/2016 12/1/2015 12/1/2014 12/1/2013 12/1/2012 12/1/2011 12/1/2010 . 0 Operating Revenue | $15.07 | $14.53 | $12.68 | $10.74 | $9.22 | $8.44 | $6.79 | $5.26 | $4.36 | $3.09 | . 1 Revenue | $15.07 | $14.53 | $12.68 | $10.74 | $9.22 | $8.44 | $6.79 | $5.26 | $4.36 | $3.09 | . 2 Cost of Goods Sold | $0.00 | $0.00 | $0.24 | $0.42 | $0.63 | $0.86 | $1.08 | $1.18 | $1.28 | $1.18 | . 3 Gross Profit | $0.00 | $0.00 | $12.44 | $10.33 | $8.59 | $7.58 | $5.72 | $4.08 | $3.08 | $1.91 | . 4 Sales and Marketing Expense | $5.92 | $5.79 | $5.11 | $4.23 | $3.37 | $2.90 | $2.16 | $1.51 | $1.12 | $0.70 | . 5 General and Administrative Expense | $3.05 | $2.74 | $2.24 | $1.80 | $1.58 | $1.30 | $0.95 | $0.64 | $0.48 | $0.35 | . 6 SG&amp;A Expense | $8.97 | $8.53 | $7.35 | $6.03 | $4.95 | $4.21 | $3.11 | $2.15 | $1.59 | $1.06 | . 7 Research and Development Expense | $0.29 | $0.23 | $0.19 | $0.14 | $0.11 | $0.98 | $0.07 | $0.04 | $0.03 | $0.02 | . 8 Investment Write Off | $0.00 | $0.00 | $0.00 | $0.06 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | . 9 Special Income and Charges | $0.00 | $0.00 | $0.00 | -$1.00 | $0.000 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | . 10 Operating Interest Expense | $0.27 | $0.27 | $0.25 | $0.21 | $0.16 | $0.09 | $0.08 | $0.06 | $0.03 | $0.03 | . 11 Operating Interest Income | $0.15 | $0.19 | $0.16 | $0.10 | $0.06 | $0.01 | $0.00 | $0.00 | $0.01 | $0.00 | . 12 Net Operating Interest Income | -$0.11 | -$0.08 | -$0.10 | -$0.11 | -$0.10 | -$0.07 | -$0.08 | -$0.06 | -$0.02 | -$0.03 | . 13 Other Operating Expenses | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | . 14 Total Operating Expenses | $9.72 | $9.19 | $7.90 | $6.48 | $5.33 | $4.51 | $3.30 | $2.25 | $1.68 | $1.12 | . 15 Operating Income | $5.35 | $5.34 | $4.54 | $3.85 | $3.26 | $3.07 | $2.41 | $1.83 | $1.40 | $0.79 | . 16 Non-Operating Interest Income | $0.15 | $0.19 | $0.16 | $0.10 | $0.06 | $0.01 | $0.00 | $0.00 | $0.01 | $0.00 | . 17 Non-Operating Interest Expense | $0.27 | $0.27 | $0.25 | $0.21 | $0.16 | $0.09 | $0.08 | $0.06 | $0.03 | $0.03 | . 18 Net Non-Operating Interest Income Expense | -$0.11 | -$0.08 | -$0.10 | -$0.11 | -$0.10 | -$0.07 | -$0.08 | -$0.06 | -$0.02 | -$0.03 | . 19 Other Income and Expenses | $0.73 | -$0.42 | -$0.04 | -$1.02 | -$0.03 | -$0.01 | -$0.04 | -$0.01 | -$0.01 | -$0.01 | . 20 Net Interest Income | -$0.11 | -$0.08 | -$0.10 | -$0.11 | -$0.10 | -$0.07 | -$0.08 | -$0.06 | -$0.02 | -$0.03 | . 21 Pre-Tax Income | $5.96 | $4.84 | $4.40 | $2.71 | $3.13 | $2.99 | $2.30 | $1.76 | $1.37 | $0.75 | . 22 Provision for Income Taxes | $1.09 | $0.84 | $2.06 | $0.58 | $0.58 | $0.57 | $0.40 | $0.34 | $0.31 | $0.22 | . 23 Income from Continuing Operations | $4.87 | $4.00 | $2.34 | $2.14 | $2.55 | $2.42 | $1.89 | $1.42 | $1.06 | $0.53 | . 24 Income Attributable to Minority Interest | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | . 25 Preferred Stock Dividend | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | . 26 Net Income | $4.87 | $4.00 | $2.34 | $2.14 | $2.55 | $2.42 | $1.89 | $1.42 | $1.06 | $0.53 | . 27 Normalized Income | $4.27 | $4.35 | $2.37 | $2.94 | $2.57 | $2.43 | $1.92 | $1.43 | $1.06 | $0.54 | . 28 EBITDA | $6.87 | $5.53 | $5.02 | $3.23 | $3.56 | $3.29 | $2.50 | $1.89 | $1.45 | $0.83 | . 29 Reconciled Depreciation | $0.64 | $0.43 | $0.36 | $0.31 | $0.27 | $0.21 | $0.12 | $0.07 | $0.05 | $0.05 | . 30 EBIT | $6.22 | $5.10 | $4.65 | $2.92 | $3.29 | $3.08 | $2.38 | $1.82 | $1.40 | $0.78 | . Balance Sheet . #hide-input balance = booking_df_list[1][1] balance_table = balance.drop_duplicates(keep=False) balance_table[balance_table.columns] . Year 12/1/2019 12/1/2018 12/1/2017 12/1/2016 12/1/2015 12/1/2014 12/1/2013 12/1/2012 12/1/2011 12/1/2010 . 0 Cash and Equivalents | $6.31 | $2.62 | $2.54 | $2.08 | $1.48 | $3.15 | $1.29 | $1.54 | $0.63 | $0.36 | | . 1 Short Term Investments | $1.00 | $3.66 | $4.86 | $2.22 | $1.17 | $1.14 | $5.46 | $3.65 | $2.03 | $1.30 | | . 2 Cash and Short Term Investments | $7.31 | $6.28 | $7.40 | $4.30 | $2.65 | $4.29 | $6.75 | $5.18 | $2.66 | $1.66 | | . 3 Accounts Receivable | $1.68 | $1.52 | $1.22 | $0.86 | $0.65 | $0.64 | $0.54 | $0.37 | $0.26 | $0.16 | | . 4 Total Receivables | $1.68 | $1.52 | $1.22 | $0.86 | $0.65 | $0.64 | $0.54 | $0.37 | $0.26 | $0.16 | | . 5 Prepaid Expenses | $0.84 | $0.60 | $0.42 | $0.24 | $0.26 | $0.18 | $0.11 | $0.08 | $0.10 | $0.06 | | . 6 Restricted Cash | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.01 | $0.01 | $0.00 | $0.00 | | . 7 Current Deferred Tax Assets | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.07 | $0.04 | $0.04 | $0.07 | | . 8 Other Current Assets | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 9 Total Current Assets | $9.83 | $8.41 | $9.04 | $5.40 | $3.55 | $5.11 | $7.48 | $5.68 | $3.07 | $1.96 | | . 10 Properties | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 11 Machine, Furniture &amp; Equipment | $1.24 | $1.02 | $0.82 | $0.56 | $0.43 | $0.44 | $0.31 | $0.23 | $0.18 | $0.13 | | . 12 Other Properties | $0.62 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 13 Construction in Progress | $0.16 | $0.09 | $0.01 | $0.01 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 14 Leases | $0.27 | $0.24 | $0.20 | $0.14 | $0.11 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 15 Gross PP&amp;E | $2.29 | $1.35 | $1.02 | $0.71 | $0.54 | $0.44 | $0.31 | $0.23 | $0.18 | $0.13 | | . 16 Accumulated D&amp;A | -$0.93 | -$0.69 | -$0.54 | -$0.36 | -$0.26 | -$0.24 | -$0.18 | -$0.14 | -$0.11 | -$0.09 | | . 17 Net PP&amp;E | $1.36 | $0.66 | $0.48 | $0.35 | $0.27 | $0.20 | $0.14 | $0.09 | $0.06 | $0.04 | | . 18 Goodwill | $2.91 | $2.91 | $2.74 | $2.40 | $3.38 | $3.33 | $1.77 | $0.52 | $0.50 | $0.51 | | . 19 Other Intangible Assets | $1.95 | $2.13 | $2.18 | $1.99 | $2.17 | $2.34 | $1.02 | $0.21 | $0.20 | $0.23 | | . 20 Goodwill and Intangibles | $4.87 | $5.04 | $4.92 | $4.39 | $5.54 | $5.66 | $2.79 | $0.73 | $0.70 | $0.74 | | . 21 Long Term Investments | $4.48 | $8.41 | $10.87 | $9.59 | $7.93 | $3.76 | $0.00 | $0.00 | $0.00 | $0.00 | | . 22 Long Term Deferred Assets | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.02 | $0.06 | $0.12 | $0.15 | | . 23 Other Long Term Assets | $0.87 | $0.18 | $0.15 | $0.11 | $0.12 | $0.04 | $0.01 | $0.01 | $0.01 | $0.01 | | . 24 Total Long Term Assets | $11.57 | $14.28 | $16.42 | $14.44 | $13.87 | $9.66 | $2.96 | $0.89 | $0.90 | $0.95 | | . 25 Total Assets | $21.40 | $22.69 | $25.45 | $19.84 | $17.42 | $14.77 | $10.44 | $6.57 | $3.97 | $2.91 | | . 26 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 27 Liabilities (Annual) | 12/1/2019 | 12/1/2018 | 12/1/2017 | 12/1/2016 | 12/1/2015 | 12/1/2014 | 12/1/2013 | 12/1/2012 | 12/1/2011 | 12/1/2010 | | . 28 Accounts Payable | $1.24 | $1.13 | $0.67 | $0.42 | $0.32 | $0.28 | $0.25 | $0.18 | $0.15 | $0.09 | | . 29 Total Payables | $1.24 | $1.13 | $0.67 | $0.42 | $0.32 | $0.28 | $0.25 | $0.18 | $0.15 | $0.09 | | . 30 Accrued Expenses | $1.58 | $1.40 | $1.14 | $0.86 | $0.68 | $0.60 | $0.55 | $0.39 | $0.22 | $0.24 | | . 31 Payables and Accrued Expenses | $2.82 | $2.53 | $1.81 | $1.28 | $1.00 | $0.88 | $0.79 | $0.57 | $0.37 | $0.33 | | . 32 Other Current Borrowings | $0.99 | $0.00 | $0.71 | $0.97 | $0.00 | $0.04 | $0.15 | $0.52 | $0.50 | $0.00 | | . 33 Current Portion of Long Term Debt | $0.99 | $0.00 | $0.71 | $0.97 | $0.00 | $0.04 | $0.15 | $0.52 | $0.50 | $0.00 | | . 34 Current Debt &amp; Capital Lease Obligation | $0.99 | $0.00 | $0.71 | $0.97 | $0.00 | $0.04 | $0.15 | $0.52 | $0.50 | $0.00 | | . 35 Current Deferred Revenue | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 36 Current Deferred Liabilities | $1.56 | $1.02 | $0.98 | $0.61 | $0.43 | $0.46 | $0.44 | $0.37 | $0.24 | $0.14 | | . 37 Other Current Liability | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 38 Total Current Liabilities | $5.37 | $3.56 | $3.50 | $2.86 | $1.44 | $1.38 | $1.38 | $1.46 | $1.11 | $0.47 | | . 39 Non-Current Portion of Long Term Debt | $7.64 | $8.65 | $8.81 | $6.20 | $6.16 | $3.82 | $1.75 | $0.94 | $0.08 | $0.48 | | . 40 Long Term Cap Lease Obligation | $0.46 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 41 Non-Current Portion of LTD and Capital Lease O... | $8.10 | $8.65 | $8.81 | $6.20 | $6.16 | $3.82 | $1.75 | $0.94 | $0.08 | $0.48 | | . 42 Long Term Deferred Tax Liabilities | $1.90 | $1.54 | $1.73 | $0.82 | $0.89 | $0.90 | $0.33 | $0.05 | $0.05 | $0.06 | | . 43 Non-Current Deferred Liabilities | $1.90 | $1.54 | $1.73 | $0.82 | $0.89 | $0.90 | $0.33 | $0.05 | $0.05 | $0.06 | | . 44 Minority Interest Ownership | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.05 | | . 45 Preferred Securities out of Shareholders Equity | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.16 | $0.13 | $0.00 | | . 46 Other Long Term Liabilities | $0.10 | $0.16 | $0.15 | $0.14 | $0.13 | $0.10 | $0.08 | $0.07 | $0.04 | $0.04 | | . 47 Total Long Term Liabilities | $10.10 | $10.35 | $10.69 | $7.16 | $7.19 | $4.83 | $2.15 | $1.21 | $0.29 | $0.58 | | . 48 Total Liabilities | $15.47 | $13.90 | $14.19 | $10.02 | $8.63 | $6.20 | $3.54 | $2.67 | $1.40 | $1.05 | | . Cash Flows . #hide-input cash = booking_df_list[2][1] cash_table = cash.drop_duplicates(keep=False) cash_table[cash_table.columns] . Year 2019-12 2018-12 2017-12 2016-12 2015-12 2014-12 2013-12 2012-12 2011-12 2010-12 . 0 Net Income | $4.87 | $4.00 | $2.34 | $2.14 | $2.55 | $2.42 | $1.89 | $1.42 | $1.06 | $0.53 | | . 1 Gain and Loss on Sale of PPE | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 2 Earnings Loss from Eq. Investments | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 3 Operating Gains Losses | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.01 | $0.03 | $0.00 | $0.00 | $0.01 | | . 4 Depreciation Expense | $0.64 | $0.43 | $0.36 | $0.14 | $0.10 | $0.08 | $0.05 | $0.03 | $0.02 | $0.02 | | . 5 Amortization Expense CF | $0.00 | $0.00 | $0.00 | $0.17 | $0.17 | $0.13 | $0.07 | $0.03 | $0.03 | $0.03 | | . 6 Total Depreciation and Amortization | $0.64 | $0.43 | $0.36 | $0.31 | $0.27 | $0.21 | $0.12 | $0.07 | $0.05 | $0.05 | | . 7 Total Depreciation, Amortization, Depletion | $0.64 | $0.43 | $0.36 | $0.31 | $0.27 | $0.21 | $0.12 | $0.07 | $0.05 | $0.05 | | . 8 Deferred Taxes | $0.12 | -$0.15 | -$0.03 | -$0.11 | -$0.06 | $0.03 | -$0.01 | $0.02 | $0.04 | $0.04 | | . 9 Amortization of Securities | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 10 Asset Impairment Charge | $0.00 | $0.00 | $0.00 | $1.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 11 Unrealized Gain (Loss) on Investment Securities | -$0.75 | $0.37 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 12 Stock Based Compensation | $0.33 | $0.33 | $0.26 | $0.25 | $0.25 | $0.19 | $0.14 | $0.07 | $0.07 | $0.07 | | . 13 Excess Tax Benefit from Stock Compensation | $0.00 | $0.00 | $0.00 | $0.06 | $0.10 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 14 Other Noncash Items | $0.06 | $0.06 | $0.08 | $0.08 | $0.07 | $0.06 | $0.06 | $0.05 | $0.02 | $0.02 | | . 15 Change in Receivables | -$0.32 | -$0.32 | -$0.27 | -$0.28 | -$0.07 | -$0.18 | -$0.11 | -$0.11 | -$0.13 | -$0.03 | | . 16 Change in Prepaid Assets | -$0.26 | -$0.20 | -$0.12 | $0.01 | -$0.08 | -$0.05 | -$0.01 | -$0.04 | $0.01 | -$0.02 | | . 17 Change in Payables and Accrued Expense | $0.48 | $0.64 | $0.69 | $0.51 | $0.17 | $0.20 | $0.18 | $0.26 | $0.21 | $0.08 | | . 18 Change in Other Current Assets | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 19 Change in Other Current Liabilities | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 20 Change in Other Working Cap | -$0.43 | $0.03 | $1.30 | -$0.02 | -$0.02 | $0.00 | -$0.01 | $0.03 | -$0.01 | $0.02 | | . 21 Changes in Working Capital | -$0.54 | $0.14 | $1.59 | $0.21 | -$0.01 | -$0.03 | $0.05 | $0.14 | $0.08 | $0.05 | | . 22 Cash from Operations | $4.87 | $5.34 | $4.66 | $3.98 | $3.20 | $2.91 | $2.30 | $1.79 | $1.34 | $0.78 | | . 24 Cash Flow - Investing (Annual) | 12/1/2019 | 12/1/2018 | 12/1/2017 | 12/1/2016 | 12/1/2015 | 12/1/2014 | 12/1/2013 | 12/1/2012 | 12/1/2011 | 12/1/2010 | | . 25 Net Change in Capital Expenditures | -$0.37 | -$0.44 | -$0.29 | -$0.27 | -$0.17 | -$0.13 | -$0.08 | -$0.06 | -$0.05 | -$0.02 | | . 26 Sale of PPE | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 27 Net Change in PP&amp;E | -$0.37 | -$0.44 | -$0.29 | -$0.22 | -$0.17 | -$0.13 | -$0.08 | -$0.06 | -$0.05 | -$0.02 | | . 28 Net Change in Intangibles | $0.00 | $0.00 | $0.00 | -$0.05 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 29 Net Divestitures (Acquisitions) | -$0.01 | -$0.27 | -$0.55 | $0.00 | -$0.14 | -$2.50 | -$0.33 | -$0.03 | -$0.07 | -$0.11 | | . 30 Total Net Change in Investments | $7.43 | $2.93 | -$3.36 | -$3.06 | -$3.58 | $0.27 | -$1.74 | -$1.47 | -$0.79 | -$0.71 | | . 31 Net Other Investing Changes | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 32 Cash from Investing | $7.05 | $2.22 | -$4.20 | -$3.33 | -$3.90 | -$2.36 | -$2.16 | -$1.56 | -$0.90 | -$0.84 | | . 34 Cash Flow - Financing (Annual) | 12/1/2019 | 12/1/2018 | 12/1/2017 | 12/1/2016 | 12/1/2015 | 12/1/2014 | 12/1/2013 | 12/1/2012 | 12/1/2011 | 12/1/2010 | | . 35 Net Change in Long Term Debt | -$0.03 | -$1.46 | $1.76 | $1.00 | $2.25 | $2.14 | $0.56 | $1.00 | $0.00 | $0.28 | | . 36 Net Change in Short Term Debt | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 37 Net Debt Issuance | -$0.03 | -$1.46 | $1.76 | $1.00 | $2.25 | $2.14 | $0.56 | $1.00 | $0.00 | $0.28 | | . 38 Common Stock Issuance | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 39 Common Stock Payments | -$8.19 | -$5.97 | -$1.83 | -$1.01 | -$3.09 | -$0.75 | -$0.88 | -$0.26 | -$0.16 | -$0.13 | | . 40 Net Common Equity Issued (Purchased) | -$8.19 | -$5.97 | -$1.83 | -$1.01 | -$3.09 | -$0.75 | -$0.88 | -$0.26 | -$0.16 | -$0.13 | | . 41 Proceeds from Stock Option Exercised | $0.00 | $0.00 | $0.00 | $0.02 | $0.02 | $0.02 | $0.09 | $0.00 | $0.00 | $0.03 | | . 42 Cash from Other Financing Activities | -$0.01 | $0.00 | -$0.01 | $0.00 | -$0.01 | $0.02 | -$0.18 | -$0.08 | $0.01 | $0.04 | | . 43 Cash from Financing | -$8.22 | -$7.43 | -$0.08 | $0.00 | -$0.83 | $1.43 | -$0.40 | $0.67 | -$0.15 | $0.21 | | . 45 Ending Cash (Annual) | 12/1/2019 | 12/1/2018 | 12/1/2017 | 12/1/2016 | 12/1/2015 | 12/1/2014 | 12/1/2013 | 12/1/2012 | 12/1/2011 | 12/1/2010 | | . 46 Beginning Cash | $2.65 | $2.56 | $2.08 | $1.48 | $3.15 | $1.30 | $1.54 | $0.63 | $0.36 | $0.20 | | . 47 Change in Cash | $3.70 | $0.12 | $0.38 | $0.65 | -$1.52 | $1.99 | -$0.26 | $0.89 | $0.29 | $0.15 | | . 48 Cash Foreign Exchange Adjustment | -$0.01 | -$0.04 | $0.10 | -$0.05 | -$0.15 | -$0.14 | $0.02 | $0.01 | -$0.01 | $0.01 | | . 49 Ending Cash | $6.33 | $2.65 | $2.56 | $2.08 | $1.48 | $3.15 | $1.29 | $1.54 | $0.63 | $0.36 | | . 51 Additional Items (Annual) | 12/1/2019 | 12/1/2018 | 12/1/2017 | 12/1/2016 | 12/1/2015 | 12/1/2014 | 12/1/2013 | 12/1/2012 | 12/1/2011 | 12/1/2010 | | . 52 Issuance of Capital Stock | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | $0.00 | | . 53 Issuance of Debt | $0.40 | $0.03 | $2.05 | $1.00 | $2.62 | $3.26 | $0.98 | $1.00 | $0.00 | $0.58 | | . 54 Debt Repayment | -$0.43 | -$1.49 | -$0.29 | $0.00 | -$0.37 | -$1.12 | -$0.41 | $0.00 | $0.00 | -$0.30 | | . 55 Repurchase of Capital Stock | -$8.19 | -$5.97 | -$1.83 | -$1.01 | -$3.09 | -$0.75 | -$0.88 | -$0.26 | -$0.16 | -$0.13 | | . 56 Income Tax Paid Supplemental Data | $1.07 | $1.17 | $0.70 | $0.64 | $0.53 | $0.49 | $0.39 | $0.30 | $0.23 | $0.17 | | . 57 Interest Paid Supplemental Data | $0.22 | $0.22 | $0.16 | $0.13 | $0.05 | $0.02 | $0.02 | $0.01 | $0.01 | $0.00 | | . Financial Analysis . Earnings Base Growth Rates . #hide-input income_g = booking_df_list[3][1] income_g_table = income_g cleaned = income_g_table[income_g_table.columns][:10] cleaned.columns cleaned . Year Revenue Gross Profit Net Income EBITDA Revenue Growth AVG Revenue Growth Gross Profit Growth AVG Gross Profit Growth Net Income Growth AVG Net Income Growth EBITDA Growth AVG EBITDA Growth . 0 12/1/2019 | 15.07 | | 4.865 | 6.865 | 3.72% | 19.72% | | 31.50% | 21.69% | 31.89% | 24.14% | 28.70% | . 1 12/1/2018 | 14.53 | | 3.998 | 5.53 | 14.59% | 19.72% | | 31.50% | 70.78% | 31.89% | 10.25% | 28.70% | . 2 12/1/2017 | 12.68 | 12.44 | 2.341 | 5.016 | 18.06% | 19.72% | 20.43% | 31.50% | 9.65% | 31.89% | 55.29% | 28.70% | . 3 12/1/2016 | 10.74 | 10.33 | 2.135 | 3.23 | 16.44% | 19.72% | 20.23% | 31.50% | -16.31% | 31.89% | -9.30% | 28.70% | . 4 12/1/2015 | 9.224 | 8.592 | 2.551 | 3.561 | 9.26% | 19.72% | 13.29% | 31.50% | 5.33% | 31.89% | 8.37% | 28.70% | . 5 12/1/2014 | 8.442 | 7.584 | 2.422 | 3.286 | 24.27% | 19.72% | 32.68% | 31.50% | 27.95% | 31.89% | 31.55% | 28.70% | . 6 12/1/2013 | 6.793 | 5.716 | 1.893 | 2.498 | 29.12% | 19.72% | 39.96% | 31.50% | 33.31% | 31.89% | 32.24% | 28.70% | . 7 12/1/2012 | 5.261 | 4.084 | 1.42 | 1.889 | 20.78% | 19.72% | 32.60% | 31.50% | 34.47% | 31.89% | 30.01% | 28.70% | . 8 12/1/2011 | 4.356 | 3.08 | 1.056 | 1.453 | 41.20% | 19.72% | 61.34% | 31.50% | 100.17% | 31.89% | 75.76% | 28.70% | . 9 12/1/2010 | 3.085 | 1.909 | 0.52754 | 0.82669 | #DIV/0! | | | | #DIV/0! | | #DIV/0! | | . #hide-input columns = [&#39;Year&#39;,&#39;Revenue Growth&#39;, &#39;AVG Revenue Growth&#39;, &#39;Gross Profit Growth&#39;, &#39;AVG Gross Profit Growth&#39;, &#39;Net Income Growth&#39;, &#39;AVG Net Income Growth&#39;, &#39;EBITDA Growth&#39;, &#39;AVG EBITDA Growth&#39;] cleaned[columns] . Year Revenue Growth AVG Revenue Growth Gross Profit Growth AVG Gross Profit Growth Net Income Growth AVG Net Income Growth EBITDA Growth AVG EBITDA Growth . 0 12/1/2019 | 3.72% | 19.72% | | 31.50% | 21.69% | 31.89% | 24.14% | 28.70% | . 1 12/1/2018 | 14.59% | 19.72% | | 31.50% | 70.78% | 31.89% | 10.25% | 28.70% | . 2 12/1/2017 | 18.06% | 19.72% | 20.43% | 31.50% | 9.65% | 31.89% | 55.29% | 28.70% | . 3 12/1/2016 | 16.44% | 19.72% | 20.23% | 31.50% | -16.31% | 31.89% | -9.30% | 28.70% | . 4 12/1/2015 | 9.26% | 19.72% | 13.29% | 31.50% | 5.33% | 31.89% | 8.37% | 28.70% | . 5 12/1/2014 | 24.27% | 19.72% | 32.68% | 31.50% | 27.95% | 31.89% | 31.55% | 28.70% | . 6 12/1/2013 | 29.12% | 19.72% | 39.96% | 31.50% | 33.31% | 31.89% | 32.24% | 28.70% | . 7 12/1/2012 | 20.78% | 19.72% | 32.60% | 31.50% | 34.47% | 31.89% | 30.01% | 28.70% | . 8 12/1/2011 | 41.20% | 19.72% | 61.34% | 31.50% | 100.17% | 31.89% | 75.76% | 28.70% | . 9 12/1/2010 | #DIV/0! | | | | #DIV/0! | | #DIV/0! | | . #hide-input #Stack Dataframes For Charting byYear = cleaned[columns].set_index(&quot;Year&quot;).stack() df = pd.DataFrame(byYear, columns=[&#39;Value&#39;]) df.reset_index(inplace=True) df.rename(columns={&quot;level_1&quot;:&#39;Metric&#39;}, inplace=True) df.dropna(inplace=True) df[~df.Value.str.contains(&quot;#DIV/0!&quot;)] df[~df.Year.str.contains(&quot;12/1/2010&quot;)] df.set_index(&#39;Metric&#39;) df[&#39;Value&#39;] = pd.to_numeric(df[&#39;Value&#39;].str.rstrip(&#39;%&#39;), errors=&#39;coerce&#39;) / 1000 df . Year Metric Value . 0 12/1/2019 | Revenue Growth | 0.00372 | . 1 12/1/2019 | AVG Revenue Growth | 0.01972 | . 2 12/1/2019 | Gross Profit Growth | NaN | . 3 12/1/2019 | AVG Gross Profit Growth | 0.03150 | . 4 12/1/2019 | Net Income Growth | 0.02169 | . 5 12/1/2019 | AVG Net Income Growth | 0.03189 | . 6 12/1/2019 | EBITDA Growth | 0.02414 | . 7 12/1/2019 | AVG EBITDA Growth | 0.02870 | . 8 12/1/2018 | Revenue Growth | 0.01459 | . 9 12/1/2018 | AVG Revenue Growth | 0.01972 | . 10 12/1/2018 | Gross Profit Growth | NaN | . 11 12/1/2018 | AVG Gross Profit Growth | 0.03150 | . 12 12/1/2018 | Net Income Growth | 0.07078 | . 13 12/1/2018 | AVG Net Income Growth | 0.03189 | . 14 12/1/2018 | EBITDA Growth | 0.01025 | . 15 12/1/2018 | AVG EBITDA Growth | 0.02870 | . 16 12/1/2017 | Revenue Growth | 0.01806 | . 17 12/1/2017 | AVG Revenue Growth | 0.01972 | . 18 12/1/2017 | Gross Profit Growth | 0.02043 | . 19 12/1/2017 | AVG Gross Profit Growth | 0.03150 | . 20 12/1/2017 | Net Income Growth | 0.00965 | . 21 12/1/2017 | AVG Net Income Growth | 0.03189 | . 22 12/1/2017 | EBITDA Growth | 0.05529 | . 23 12/1/2017 | AVG EBITDA Growth | 0.02870 | . 24 12/1/2016 | Revenue Growth | 0.01644 | . 25 12/1/2016 | AVG Revenue Growth | 0.01972 | . 26 12/1/2016 | Gross Profit Growth | 0.02023 | . 27 12/1/2016 | AVG Gross Profit Growth | 0.03150 | . 28 12/1/2016 | Net Income Growth | -0.01631 | . 29 12/1/2016 | AVG Net Income Growth | 0.03189 | . 30 12/1/2016 | EBITDA Growth | -0.00930 | . 31 12/1/2016 | AVG EBITDA Growth | 0.02870 | . 32 12/1/2015 | Revenue Growth | 0.00926 | . 33 12/1/2015 | AVG Revenue Growth | 0.01972 | . 34 12/1/2015 | Gross Profit Growth | 0.01329 | . 35 12/1/2015 | AVG Gross Profit Growth | 0.03150 | . 36 12/1/2015 | Net Income Growth | 0.00533 | . 37 12/1/2015 | AVG Net Income Growth | 0.03189 | . 38 12/1/2015 | EBITDA Growth | 0.00837 | . 39 12/1/2015 | AVG EBITDA Growth | 0.02870 | . 40 12/1/2014 | Revenue Growth | 0.02427 | . 41 12/1/2014 | AVG Revenue Growth | 0.01972 | . 42 12/1/2014 | Gross Profit Growth | 0.03268 | . 43 12/1/2014 | AVG Gross Profit Growth | 0.03150 | . 44 12/1/2014 | Net Income Growth | 0.02795 | . 45 12/1/2014 | AVG Net Income Growth | 0.03189 | . 46 12/1/2014 | EBITDA Growth | 0.03155 | . 47 12/1/2014 | AVG EBITDA Growth | 0.02870 | . 48 12/1/2013 | Revenue Growth | 0.02912 | . 49 12/1/2013 | AVG Revenue Growth | 0.01972 | . 50 12/1/2013 | Gross Profit Growth | 0.03996 | . 51 12/1/2013 | AVG Gross Profit Growth | 0.03150 | . 52 12/1/2013 | Net Income Growth | 0.03331 | . 53 12/1/2013 | AVG Net Income Growth | 0.03189 | . 54 12/1/2013 | EBITDA Growth | 0.03224 | . 55 12/1/2013 | AVG EBITDA Growth | 0.02870 | . 56 12/1/2012 | Revenue Growth | 0.02078 | . 57 12/1/2012 | AVG Revenue Growth | 0.01972 | . 58 12/1/2012 | Gross Profit Growth | 0.03260 | . 59 12/1/2012 | AVG Gross Profit Growth | 0.03150 | . 60 12/1/2012 | Net Income Growth | 0.03447 | . 61 12/1/2012 | AVG Net Income Growth | 0.03189 | . 62 12/1/2012 | EBITDA Growth | 0.03001 | . 63 12/1/2012 | AVG EBITDA Growth | 0.02870 | . 64 12/1/2011 | Revenue Growth | 0.04120 | . 65 12/1/2011 | AVG Revenue Growth | 0.01972 | . 66 12/1/2011 | Gross Profit Growth | 0.06134 | . 67 12/1/2011 | AVG Gross Profit Growth | 0.03150 | . 68 12/1/2011 | Net Income Growth | 0.10017 | . 69 12/1/2011 | AVG Net Income Growth | 0.03189 | . 70 12/1/2011 | EBITDA Growth | 0.07576 | . 71 12/1/2011 | AVG EBITDA Growth | 0.02870 | . 72 12/1/2010 | Revenue Growth | NaN | . 73 12/1/2010 | AVG Revenue Growth | NaN | . 74 12/1/2010 | Gross Profit Growth | NaN | . 75 12/1/2010 | AVG Gross Profit Growth | NaN | . 76 12/1/2010 | Net Income Growth | NaN | . 77 12/1/2010 | AVG Net Income Growth | NaN | . 78 12/1/2010 | EBITDA Growth | NaN | . 79 12/1/2010 | AVG EBITDA Growth | NaN | . Earnings Base Historical Growth Rates . #hide-input # select a point for which to provide details-on-demand # label = alt.selection_single( # encodings=[&#39;x&#39;], # limit selection to x-axis value # on=&#39;mouseover&#39;, # select on mouseover events # nearest=True, # select data point nearest the cursor # empty=&#39;none&#39; # empty selection includes no data points # ) label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;Value:Q&#39;) , color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) # alt.Color(&#39;Metric:N&#39;), opacity = alt.condition(label, alt.value(1), alt.value(0.5)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . Earnings Base Historical Growth in Growth Rates (Natural Log) . #hide-input #Take natural logs df[&#39;log Value&#39;] = np.around(np.log(df[&#39;Value&#39;]), 4) # select a point for which to provide details-on-demand label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;log Value:Q&#39;), color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(title=&quot;Log Growth Rate&quot;, labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . /usr/local/lib/python3.6/dist-packages/pandas/core/series.py:679: RuntimeWarning: invalid value encountered in log result = getattr(ufunc, method)(*inputs, **kwargs) . Costs Strucutres over Time . #hide-input cost = booking_df_list[4][1] income_g_table = cost cleaned = income_g_table[income_g_table.columns][11:21] cleaned.columns . Index([&#39;Year&#39;, &#39;Operating Revenue&#39;, &#39;Total Operating Expenses&#39;, &#39;Operating Income&#39;, &#39;Total Operating Expenses/Operating Revenue&#39;, &#39;Operating Revenue Growth&#39;, &#39;AVG Operating Revenue Growth&#39;, &#39;Total Operating Expenses Growth&#39;, &#39;AVG Total Operating Expenses Growth&#39;, &#39;Operating Income Growth&#39;, &#39;AVG Operating Income Growth&#39;], dtype=&#39;object&#39;) . #hide-input columns = [&#39;Year&#39;, &#39;Operating Revenue&#39;, &#39;Total Operating Expenses&#39;, &#39;Operating Income&#39;] cleaned = cleaned[columns] cleaned . Year Operating Revenue Total Operating Expenses Operating Income . 11 12/1/2019 | $15.07 | $9.72 | $5.35 | . 12 12/1/2018 | $14.53 | $9.19 | $5.34 | . 13 12/1/2017 | $12.68 | $7.90 | $4.54 | . 14 12/1/2016 | $10.74 | $6.48 | $3.85 | . 15 12/1/2015 | $9.22 | $5.33 | $3.26 | . 16 12/1/2014 | $8.44 | $4.51 | $3.07 | . 17 12/1/2013 | $6.79 | $3.30 | $2.41 | . 18 12/1/2012 | $5.26 | $2.25 | $1.83 | . 19 12/1/2011 | $4.36 | $1.68 | $1.40 | . 20 12/1/2010 | $3.09 | $1.12 | $0.79 | . #hide-input #Stack Dataframes For Charting cleaned byYear = cleaned.set_index(&quot;Year&quot;).stack() df = pd.DataFrame(byYear, columns=[&#39;Value&#39;]) df.reset_index(inplace=True) df.rename(columns={&quot;level_1&quot;:&#39;Metric&#39;}, inplace=True) df.dropna(inplace=True) df[~df.Value.str.contains(&quot;#DIV/0!&quot;)] df[~df.Year.str.contains(&quot;12/1/2010&quot;)] df.set_index(&#39;Metric&#39;) df[&#39;Value&#39;] = pd.to_numeric(df[&#39;Value&#39;].str.lstrip(&#39;$&#39;), errors=&#39;ignore&#39;) . #hide-input # select a point for which to provide details-on-demand # label = alt.selection_single( # encodings=[&#39;x&#39;], # limit selection to x-axis value # on=&#39;mouseover&#39;, # select on mouseover events # nearest=True, # select data point nearest the cursor # empty=&#39;none&#39; # empty selection includes no data points # ) label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;Value:Q&#39;) , color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) # alt.Color(&#39;Metric:N&#39;), opacity = alt.condition(label, alt.value(1), alt.value(0.5)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . #hide-input #Take natural logs df[&#39;log Value&#39;] = np.around(np.log(df[&#39;Value&#39;]), 4) # select a point for which to provide details-on-demand label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;log Value:Q&#39;), color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(title=&quot;Log Growth Rate&quot;, labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . Balance Sheet Trends . #hide-input balance = booking_df_list[5][1] balance_g_table = balance cleaned = balance_g_table[balance_g_table.columns][:10] cleaned.columns . Index([&#39;Year&#39;, &#39;Cash and Equivalents&#39;, &#39;Total Liabilities&#39;, &#39;Total Assets&#39;, &#39;Liabilities/Assets&#39;, &#39;Cash and Equivalents Growth&#39;, &#39;AVG Cash and Equivalents Growth&#39;, &#39;Total Liabilities Growth&#39;, &#39;AVG Total Liabilities Growth&#39;, &#39;Total Assets Growth&#39;, &#39;AVG Total Assets Growth&#39;, &#39;Liabilities/Assets Growth&#39;, &#39;AVG Liabilities/Assets Growth&#39;], dtype=&#39;object&#39;) . #hide-input columns = [&#39;Year&#39;, &#39;Cash and Equivalents&#39;, &#39;Total Liabilities&#39;, &#39;Total Assets&#39;, &#39;Liabilities/Assets&#39;] cleaned = cleaned[columns] cleaned byYear = cleaned[columns].set_index(&quot;Year&quot;).stack() df = pd.DataFrame(byYear, columns=[&#39;Value&#39;]) df.reset_index(inplace=True) df.rename(columns={&quot;level_1&quot;:&#39;Metric&#39;}, inplace=True) df.dropna(inplace=True) df.set_index(&#39;Metric&#39;) df[&#39;Value&#39;] = pd.to_numeric(df[&#39;Value&#39;], errors=&#39;ignore&#39;) df . Year Metric Value . 0 12/1/2019 | Cash and Equivalents | 6.312000 | . 1 12/1/2019 | Total Liabilities | 15.470000 | . 2 12/1/2019 | Total Assets | 21.400000 | . 3 12/1/2019 | Liabilities/Assets | 0.722897 | . 4 12/1/2018 | Cash and Equivalents | 2.624000 | . 5 12/1/2018 | Total Liabilities | 13.900000 | . 6 12/1/2018 | Total Assets | 22.690000 | . 7 12/1/2018 | Liabilities/Assets | 0.612605 | . 8 12/1/2017 | Cash and Equivalents | 2.542000 | . 9 12/1/2017 | Total Liabilities | 14.190000 | . 10 12/1/2017 | Total Assets | 25.450000 | . 11 12/1/2017 | Liabilities/Assets | 0.557564 | . 12 12/1/2016 | Cash and Equivalents | 2.081000 | . 13 12/1/2016 | Total Liabilities | 10.020000 | . 14 12/1/2016 | Total Assets | 19.840000 | . 15 12/1/2016 | Liabilities/Assets | 0.505040 | . 16 12/1/2015 | Cash and Equivalents | 1.477000 | . 17 12/1/2015 | Total Liabilities | 8.625000 | . 18 12/1/2015 | Total Assets | 17.420000 | . 19 12/1/2015 | Liabilities/Assets | 0.495121 | . 20 12/1/2014 | Cash and Equivalents | 3.149000 | . 21 12/1/2014 | Total Liabilities | 6.204000 | . 22 12/1/2014 | Total Assets | 14.770000 | . 23 12/1/2014 | Liabilities/Assets | 0.420041 | . 24 12/1/2013 | Cash and Equivalents | 1.290000 | . 25 12/1/2013 | Total Liabilities | 3.535000 | . 26 12/1/2013 | Total Assets | 10.440000 | . 27 12/1/2013 | Liabilities/Assets | 0.338602 | . 28 12/1/2012 | Cash and Equivalents | 1.536000 | . 29 12/1/2012 | Total Liabilities | 2.673000 | . 30 12/1/2012 | Total Assets | 6.570000 | . 31 12/1/2012 | Liabilities/Assets | 0.406849 | . 32 12/1/2011 | Cash and Equivalents | 0.632840 | . 33 12/1/2011 | Total Liabilities | 1.396000 | . 34 12/1/2011 | Total Assets | 3.971000 | . 35 12/1/2011 | Liabilities/Assets | 0.351549 | . 36 12/1/2010 | Cash and Equivalents | 0.358970 | . 37 12/1/2010 | Total Liabilities | 1.047000 | . 38 12/1/2010 | Total Assets | 2.906000 | . 39 12/1/2010 | Liabilities/Assets | 0.360289 | . Balance Sheet Historical Growth Rates . #hide-input cleaned . Year Cash and Equivalents Total Liabilities Total Assets Liabilities/Assets . 0 12/1/2019 | 6.312 | 15.47 | 21.4 | 0.722897 | . 1 12/1/2018 | 2.624 | 13.9 | 22.69 | 0.612605 | . 2 12/1/2017 | 2.542 | 14.19 | 25.45 | 0.557564 | . 3 12/1/2016 | 2.081 | 10.02 | 19.84 | 0.50504 | . 4 12/1/2015 | 1.477 | 8.625 | 17.42 | 0.495121 | . 5 12/1/2014 | 3.149 | 6.204 | 14.77 | 0.420041 | . 6 12/1/2013 | 1.29 | 3.535 | 10.44 | 0.338602 | . 7 12/1/2012 | 1.536 | 2.673 | 6.57 | 0.406849 | . 8 12/1/2011 | 0.63284 | 1.396 | 3.971 | 0.351549 | . 9 12/1/2010 | 0.35897 | 1.047 | 2.906 | 0.360289 | . Balance Sheet Historical Growth Rates . #hide-input #Take natural logs df[&#39;log Value&#39;] = np.around(np.log(df[&#39;Value&#39;]), 4) # df[&#39;log Value&#39;] = np.around(np.log(df[&#39;log&#39;]), 4) # select a point for which to provide details-on-demand label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;log Value:Q&#39;), color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(title=&quot;Growth Rate&quot;, labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . #hide-input #Take natural logs df[&#39;log&#39;] = np.around(np.log(df[&#39;Value&#39;]), 4) df[&#39;log Value&#39;] = np.around(np.log(df[&#39;log&#39;]), 4) # select a point for which to provide details-on-demand label = alt.selection_multi(fields=[&#39;Metric&#39;], bind=&#39;legend&#39;, on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;Year:T&#39;), alt.Y(&#39;log Value:Q&#39;), color = alt.Color(&#39;Metric:N&#39;, legend=alt.Legend(title=&quot;Log Growth Rate&quot;, labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;Year:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;log Value:Q&#39; ).transform_filter(label), data=df ).properties( width=700, height=400 ) . /usr/local/lib/python3.6/dist-packages/pandas/core/series.py:679: RuntimeWarning: invalid value encountered in log result = getattr(ufunc, method)(*inputs, **kwargs) . DCF Valuation . Model Choice . #hide-input valuation_book = get_sheets_as_dfs(&#39;Bookings Valutaion Model&#39;) %clear . Could not get &lt;Worksheet &#39;Sheet6&#39; id:1894043242&gt; This is probably a graph Could not get &lt;Worksheet &#39;Sheet7&#39; id:628101917&gt; This is probably a graph Could not get &lt;Worksheet &#39;Sheet8&#39; id:1370894844&gt; This is probably a graph Could not get &lt;Worksheet &#39;Sheet9&#39; id:1583931654&gt; This is probably a graph Could not get &lt;Worksheet &#39;Sheet10&#39; id:1158982833&gt; This is probably a graph Could not get &lt;Worksheet &#39;Sheet11&#39; id:205795452&gt; This is probably a graph Could not get &lt;Worksheet &#39;Sheet12&#39; id:1894736226&gt; This is probably a graph Could not get &lt;Worksheet &#39;Sheet13&#39; id:1497359425&gt; This is probably a graph Could not get &lt;Worksheet &#39;Sheet14&#39; id:1469659877&gt; This is probably a graph Could not get &lt;Worksheet &#39;Sheet15&#39; id:324090173&gt; This is probably a graph Could not get &lt;Worksheet &#39;Sheet16&#39; id:577867374&gt; This is probably a graph . #hide-input inputs = FCFF_inputs_outputs[:26][[&#39;Current Inputs&#39;, &#39;($ in Billions)&#39;]] inputs[&#39;Current Inputs&#39;] = inputs[&#39;Current Inputs&#39;].str.rstrip(&#39;=&#39;) inputs.set_index(&quot;Current Inputs&quot;) outputs = FCFF_inputs_outputs[:5][[ &#39;Year&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;]].transpose() outputs.columns = (outputs.iloc[0]) outputs.drop(outputs.index[0], inplace=True) # outputs . Inputs . #hide-input inputs . Current Inputs ($ in Billions) . 0 Enter the current revenues of the firm | $ 15.0700 | . 1 Enter current capital invested in the firm | $ 36.8700 | . 2 Enter the current depreciation | $ 0.6410 | . 3 Enter the current capital expenditures for the... | $ 0.2730 | . 4 Enter the change in Working Capital in last year | $ (0.4330) | . 5 Enter the value of current debt outstanding | $ 15.4700 | . 6 Enter the number of shares outstanding | $ 0.0411 | . 7 | | . 8 High Growth Period | | . 9 Enter the growth rate after 5 years | 15.00% | . 10 What will all operating expenses be as a % of ... | 60.46% | . 11 How much debt do you plan to use in financing ... | 29% | . 12 Enter the growth rate in capital expenditures ... | 27.11% | . 13 Enter working capital as a percent of revenues | 39.35% | . 14 Enter the tax rate that you have on corporate ... | 18.00% | . 15 What beta do you want to use to calculate cost... | 1.28 | . 16 Enter the current long term bond rate | 0.64% | . 17 Enter the market risk premium you want to use | 5.70% | . 18 Enter your cost of borrowing money | 1.77% | . 19 Stable Period | | . 20 Enter the growth rate in revenues | 2.00% | . 21 Enter operating expenses as a % of revenues in... | 64.51% | . 22 Enter capital expenditures as a percent of dep... | 42.59% | . 23 How much debt do you plan to use in financing ... | 27% | . 24 Enter interest rate of debt in stable period | 1.70% | . 25 What beta do you want to use in the stable per... | 1.28 | . Output and Forecasts . #hide-input estimated_cash_flows . Year 0 1 2 3 4 5 6 7 8 9 10 . 0 Growth in Revenue | | -60.00% | 22.80% | 20.20% | 17.60% | 15.00% | 12.40% | 9.80% | 7.20% | 4.60% | 2.00% | | . 1 Growth in Deprec&#39;n | | 27.11% | 27.11% | 27.11% | 27.11% | 27.11% | 27.11% | 17.06% | 12.04% | 7.02% | 2.00% | | . 2 Revenues | 15.07 | 6.028 | 7.40238 | 8.89767 | 10.4636 | 12.0332 | 13.5253 | 14.8508 | 15.9201 | 16.6524 | 16.9854 | | . 3 Operating Expenses | | | | | | | | | | | | | . 4 % of Revenues | 60.46% | 60.46% | 60.46% | 60.46% | 60.46% | 60.46% | 61.27% | 62.08% | 62.89% | 63.70% | 64.51% | | . 5 - $ Operating Expenses | 9.112 | 3.6448 | 4.47581 | 5.37993 | 6.3268 | 7.27582 | 8.28733 | 9.21952 | 10.012 | 10.6071 | 10.9566 | | . 6 EBIT | 5.958 | 2.3832 | 2.92657 | 3.51774 | 4.13686 | 4.75739 | 5.23799 | 5.63128 | 5.90806 | 6.04525 | 6.02887 | | . 7 Tax Rate | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | 18.00% | | . 8 | | | | | | | | | | | | | . 9 EBIT (1-t) | 4.88556 | 1.95422 | 2.39979 | 2.88454 | 3.39222 | 3.90106 | 4.29515 | 4.61765 | 4.84461 | 4.9571 | 4.94367 | | . 10 + Depreciation | 0.641 | 0.81475 | 1.0356 | 1.31631 | 1.67311 | 2.12663 | 2.70308 | 3.16433 | 3.54539 | 3.79432 | 3.87021 | | . 11 - Capital Expenditures | 0.273 | 0.347 | 0.44106 | 0.56061 | 0.71257 | 0.90573 | 1.05424 | 1.20276 | 1.35128 | 1.49979 | 1.64831 | | . 12 - Change in WC | -0.433 | -3.558 | 0.54082 | 0.58839 | 0.61621 | 0.61761 | 0.58714 | 0.52157 | 0.42075 | 0.28817 | 0.13105 | | . 13 = FCFF | 5.68656 | 5.97997 | 2.45351 | 3.05185 | 3.73655 | 4.50435 | 5.35684 | 6.05765 | 6.61798 | 6.96346 | 7.03452 | | . 14 Terminal Value | | | | | | | | | | | 172.021 | 4.17% | . #hide-input cost_of_equityNcapital . Year 1 2 3 4 5 6 7 8 9 10 . 0 Cost of Equity | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | 7.95% | . 1 Proportion of Equity | 71.06% | 71.06% | 71.06% | 71.06% | 71.06% | 71.43% | 71.79% | 72.16% | 72.53% | 72.89% | . 2 After-tax Cost of Debt | 1.45% | 1.45% | 1.45% | 1.45% | 1.45% | 1.44% | 1.43% | 1.42% | 1.40% | 1.39% | . 3 Proportion of Debt | 28.94% | 28.94% | 28.94% | 28.94% | 28.94% | 28.57% | 28.21% | 27.84% | 27.47% | 27.11% | . 4 Cost of Capital | 6.07% | 6.07% | 6.07% | 6.07% | 6.07% | 6.09% | 6.11% | 6.13% | 6.15% | 6.17% | . 5 Cumulative WACC | 106.07% | 112.50% | 119.33% | 126.56% | 134.24% | 142.41% | 151.11% | 160.37% | 170.24% | 180.74% | . 6 Present Value | 5.63795 | 2.18088 | 2.55759 | 2.95229 | 3.35539 | 3.76146 | 4.0087 | 4.12659 | 4.09045 | 99.0666 | . 7 Terminal Value | | | | | | | | | | | . Economic Value Added (EVA) FCFF . #hide-input EVA_output[:8] . Year 0 1 2 3 4 5 6 7 8 9 10 Terminal Year . 0 EBIT (1-t) | $ 4.88556 | $ 1.95422 | $ 2.39979 | $ 2.88454 | $ 3.39222 | $ 3.90106 | $ 4.29515 | $ 4.61765 | $ 4.84461 | $ 4.95710 | $ 4.94367 | $ 5.04255 | | . 1 - WACC (CI) | | $ 2.23668 | $ 1.99246 | $ 1.98920 | $ 1.97905 | $ 1.95817 | $ 1.92815 | $ 1.86991 | $ 1.78807 | $ 1.68514 | $ 1.56710 | $ (6.58045) | | . 2 EVA | | $ (0.28246) | $ 0.40732 | $ 0.89534 | $ 1.41317 | $ 1.94289 | $ 2.36700 | $ 2.74774 | $ 3.05655 | $ 3.27196 | $ 3.37657 | $ 11.62300 | | . 3 Terminal EVA | | | | | | | | | | | $ 278.65432 | | | . 4 PV | | $ (0.26630) | $ 0.36206 | $ 0.75033 | $ 1.11656 | $ 1.44730 | $ 1.66206 | $ 1.81834 | $ 1.90588 | $ 1.92200 | $ 156.03997 | | | . 5 WACC | | 6.07% | 6.07% | 6.07% | 6.07% | 6.07% | 6.09% | 6.11% | 6.13% | 6.15% | 6.17% | 6.17% | | . 6 ROC | | 5.30% | 7.31% | 8.80% | 10.40% | 12.09% | 13.56% | 15.08% | 16.61% | 18.09% | 19.47% | -4.73% | | . 7 Capital Invested | | $ 37 | $ 33 | $ 33 | $ 33 | $ 32 | $ 32 | $ 31 | $ 29 | $ 27 | $ 25 | $ (107) | (Adjusted to reflect terminal ROC) | . Calculation of Capital Invested . #hide-input EVA_output[9:14] . Year 0 1 2 3 4 5 6 7 8 9 10 Terminal Year . 9 Initial | $ 36.870 | $ 36.870 | $ 32.844 | $ 32.791 | $ 32.623 | $ 32.279 | $ 31.676 | $ 30.614 | $ 29.174 | $ 27.401 | $ 25.394 | | | . 10 + Net Cap Ex | | $ (0.468) | $ (0.595) | $ (0.756) | $ (0.961) | $ (1.221) | $ (1.649) | $ (1.962) | $ (2.194) | $ (2.295) | $ (2.222) | | | . 11 + Chg in WC | | $ (3.5580) | $ 0.5408 | $ 0.5884 | $ 0.6162 | $ 0.6176 | $ 0.5871 | $ 0.5216 | $ 0.4207 | $ 0.2882 | $ 0.1311 | | | . 12 Ending | $ 36.870 | $ 32.844 | $ 32.791 | $ 32.623 | $ 32.279 | $ 31.676 | $ 30.614 | $ 29.174 | $ 27.401 | $ 25.394 | $ 23.303 | | | . 13 Cumulated WACC | | 106.07% | 112.50% | 119.33% | 126.56% | 134.24% | 142.41% | 151.11% | 160.37% | 170.24% | 180.74% | | | . Relative Valuation . Peer Sample Cross Section . #hide-input peer_book = get_sheets_as_dfs(&#39;Bookings Peer Analysis&#39;) print(len(peer_book)) %clear . Could not get &lt;Worksheet &#39;Chart4&#39; id:1060738748&gt; This is probably a graph Could not get &lt;Worksheet &#39;Chart3&#39; id:295439058&gt; This is probably a graph Could not get &lt;Worksheet &#39;Chart2&#39; id:1880232164&gt; This is probably a graph 4 . #hide-input peers = peer_book[0][1] cleaned = peers[peers.columns][:4] compTable = cleaned fw = peer_book[1][1] cleaned = fw[[&#39;Ticker&#39;,&#39;2020&#39;, &#39;2021&#39;, &#39;2022&#39;, &#39;2023&#39;, &#39;2024&#39;, &#39;2025&#39;, &#39;Implied Return&#39;, &#39;Model Base&#39;]][:13] modelOutput = cleaned compTable . Name Symbol Gross Profit Margin Operating Margin (ttm) EBITDA MArgin (ttm) Profit Margin Return on Invested Capital Return on Equity Dividend Yield EV to EBITDA Price to Book Value PEG Ratio PE5 PE 10 PE Ratio Forward PE Relative PE Sector Relative PE Market Relative PE Ratio (Indust. Quick Ratio Current Ratio Normalized Diluted EPS (TTM) . 0 Booking Holdings Inc | BKNG | | 35.48% | 45.57% | 32.29% | 32.04% | 73.96% | 0.00% | 7.699 | 8.687 | 0.3179 | 20.59 | 29.14 | 11.15 | 17.78 | 0.8376 | 0.7703 | 1.649 | 1.6750 | 1.832 | 99.330 | . 1 Expedia Group Inc | EXPE | 82.08% | 7.68% | 15.40% | 4.68% | 5.71% | 13.66% | 2.23% | 5.958 | 2.118 | 0.3807 | 19.01 | 21.23 | 16.01 | 137.20 | 1.2030 | 1.1060 | 2.368 | 0.6006 | 0.722 | 3.993 | . 2 TripAdvisor Inc | TRIP | 93.98% | 12.04% | 21.14% | 8.07% | 8.56% | 8.56% | 0.00% | 6.440 | 2.105 | 2.0430 | 23.04 | | 20.18 | 14.33 | 1.5160 | 1.3940 | 2.985 | 1.5400 | 1.225 | 0.890 | . Forward Valuation With Various Ratios as Bases . #hide-input modelOutput #Stack Dataframes For Charting byYear = modelOutput[[&#39;Ticker&#39;,&#39;2020&#39;, &#39;2021&#39;, &#39;2022&#39;, &#39;2023&#39;, &#39;2024&#39;, &#39;2025&#39;, &#39;Model Base&#39;]].set_index([&#39;Model Base&#39;, &quot;Ticker&quot;]).stack() byYear df = pd.DataFrame(byYear, columns=[ &#39;Value&#39;]) df[&#39;Value&#39;] = pd.to_numeric(df[&#39;Value&#39;], errors=&#39;raise&#39;) df df.reset_index(inplace=True) df df.rename(columns={&quot;level_2&quot;:&#39;Year&#39;}, inplace=True) df.set_index(&#39;Model Base&#39;) price = df.Value[0] df[df[&quot;Year&quot;]==&#39;2020&#39;] aa = list(df.loc[df[&#39;Year&#39;] == &#39;2020&#39;, &#39;Value&#39;]) print(aa) df conditions = [ (df[&#39;Ticker&#39;] == &#39;BKNG&#39;), (df[&#39;Ticker&#39;] == &#39;EXPE&#39;), (df[&#39;Ticker&#39;] == &#39;TRIP&#39;)] choices = [float(aa[0]),float(aa[1]),float(aa[2])] df[&#39;CurrentPrice&#39;] = np.select(conditions, choices) df df[&#39;Return&#39;] = (df.Value - df.CurrentPrice).div(df.CurrentPrice) # df.dropna(inplace=True) # df[~df.Value.str.contains(&quot;#DIV/0!&quot;)] # df[~df.Year.str.contains(&quot;12/1/2010&quot;)] # df.set_index(&#39;Metric&#39;) # df . [1271.63, 52.0, 16.67, 1271.63, 52.0, 16.67, 1271.63, 52.0, 16.67, 1271.63, 52.0, 16.67] . #hide-input source = df # label = alt.selection_multi(fields=[&#39;Ticker&#39;], bind=&#39;legend&#39;, # on=&#39;mouseover&#39;, # select on mouseover events # nearest=True, # select data point nearest the cursor # empty=&#39;none&#39; # empty selection includes no data points # ) # alt.Chart(source).mark_bar().encode( # x=&#39;Year:T&#39;, # y=&#39;Upside:Q&#39;, # color = alt.Color(&#39;Ticker:N&#39;, legend=alt.Legend(title=&quot;Ticker&quot;, labelFontSize=15, titleFontSize=17),scale=alt.Scale(scheme=&#39;tableau20&#39;)), # column=&#39;Model Base:N&#39; # ) # bars = alt.Chart(source).mark_bar().encode( # x=alt.X(&#39;average(Return):Q&#39;, stack=&#39;zero&#39;), # y=alt.Y(&#39;Ticker:N&#39;), # color=alt.Color(&#39;Model Base&#39;) # ) # text = alt.Chart(source).mark_text(dx=-15, dy=3, color=&#39;white&#39;).encode( # x=alt.X(&#39;average(Return):Q&#39;, stack=&#39;zero&#39;), # y=alt.Y(&#39;Ticker:N&#39;), # detail=&#39;Model Base:N&#39;, # text=alt.Text(&#39;average(Return):Q&#39;, format=&#39;.1f&#39;) # ) # bars + text alt.Chart(source).mark_bar().encode( column = &quot;Ticker&quot;, x=&#39;Year&#39;, y=&#39;Return&#39;, color=&#39;Model Base&#39;).properties(width=220) . Investment Summary and Proposal . #hide-input # marketD.set_index(&#39;Variable&#39;) marketD . Variable Value . 0 ticker | BKNG | . 1 Price | 1,271.630 | . 2 52 Week High | 2,094.000 | . 3 52 Week Low | 1,107.290 | . 4 Beta (Unlevered) | 0.95 | . 5 Mkt Cap (Billions $) | 52.215 | . 6 EPS | 111.43 | . 7 Shares Outstanding (Billions) | 0.041062 | . 8 1Y Target | 2279.8 | . 9 5Y Target | 2686.65 | . 10 % Upside (1Y) | 79.28% | . 11 % Upside (5Y) | 111.28% | . Reccomendation: . We recommend a BUY on BKNG. We expect volatility to continue over the course of the next two weeks, therefore, we would like to use a tailored entry to capitalize on these movements. We propose placing a limit order for 3 shares of BKNG at $1000 per share. We would like to place a stop BUY at 1400 dollars per share. This means we would not buy BKNG unless it hit 1000 or 1300 dollars per share. . Thesis . Bookings is a quality company trading almost 50% off of 52-Week Highs. We believe that BKNG will be a winner coming out of this recession, and is currently attractive at these prices on a relative and DCF valuation basis. We think that BKNG&#39;s period of rapid revenue growth is coming to an end, however, after a large decline in revenues this year, we anticipate BKNG converging back to a steady 2% revenue growth rate over 10 years. . Why Now: The Coronavirus impacted and continues to impact the economy at an unprecedented level. Unlike the Great Depression, the Great Recession and other recessions, the Coronavirus upheaval has brought the global economy to a full halt. Economic indicators over the next few weeks will likely be some of the worst readings in the history on record. But under the presumption that the crises will eventually end, either by means of a vaccine or herd immunity, we decided to explore the wreckage that is the travel industry in search of pockets of value and mispriced names. Staying away from airlines, we turned to travel intermediaries and hospitality stocks and settled on a peer sample of companies who leverage technology. . | Why Bookings: Bookings would compliment our portfolio as a multibillion dollar, global, US based technology company with many subsidiaries, including Booking.com, Priceline.com, Agoda.com, Kayak.com, Cheapflights, Rentalcars.com, Momondo, and OpenTable. They have a reputation of market dominance in hotel bookings. Additionally, Bookings aggressively expanded their operations using their fluency in information technology and hospitality to include restaurant reservations systems internationally. Bookings earnings have steadily increased in the past, and have room to continue as they expand. . | Why Bookings now: Models, incorporating worst case scenarios for economic slowdowns, predict not only Bookings’ survival as a company due to high margins, but also future growth. The consistent revenue they bring in as a vigorous company sustains the company through black swan events like the Coronavirus while maintaining positive outlooks for the future. As an online intermediary for travelers, hotels and restaurants, Bookings’s exposure is lower than other hospitality industries that had sold off recently, such as airlines, cruise lines, amusement parks, hotels, and food servicers. They have fewer employees and have the technological flexibility to afford periods of stagnation in development. BKNG is trading at historically cheap prices compared to fundamental value, and presents a significant opportunity to add a travel industry behemoth to our portfolio, and take advantage of the extreme pessimism and volatility equity markets are currently experiencing. | . Brief Industry Overview . Traveling requires planning trips and not too long ago consumers relied on travel agencies to serve that function. Technology changed the ease in which consumers can travel and plan their travels. With the rise of the internet and social media, consumers can access information, decide where they want to go and compare prices themselves. They also have more modes of transportation via ride sharing apps, greater volume and scope of airline flights in general improvements in global infrastructure. This increases demand for more travel, tourism and hospitality and, circularly, the industry’s newfound reliance on information technology. Every aspect of the everyday has been imbued with travel technology, and Bookings provides much of this information in one place, on any of their given websites. Travel technology demand by consumers and businesses rises along with new applications for travel technology. This demand is mainly satisfied by Bookings, the largest travel technology company in the world. . Brief Peer Overview . Bookings’ competitors include Expedia, Trip.com, and TripAdvisor. Expedia with a market cap of 8.8B includes CarRentals.com, Expedia.com, Hotels.com, Orbitz and Travelocity. Trip.com with a cap of 13.8B includes Airfarewatchdog, Bookingbuddy.com, Holidaylettings.co.uk, and Jetsetter.com. TripAdvisor, with a market cap of 2.4B receives a significant portion of their revenue from Bookings and Expedia. For comparison, Bookings has a market cap of $51.5B. Bookings outperforms its competitors in almost all performance markers. . Business Description . Booking Holdings Inc. provides online travel and related services in Europe, North America, South America, the Asia-Pacific region, the Middle East, and Africa. The company operates Booking.com, which connects travelers with a selection of places to stay, including apartments, vacation homes, family-run B&amp;Bs, 5-star luxury resorts, tree houses, and igloos; and KAYAK that searches other sites to show travelers the information they need to find the right flights, hotels, rental cars, and vacation packages. It also operates Priceline, an online travel deal service, which provides travelers to save on hotel rooms, airline tickets, rental cars, vacation packages, and cruises; Agoda, which provides online accommodation reservation services. In addition, the company operates Rentalcars.com that offers online rental car reservation services; and OpenTable, an online provider of restaurant reservation and information services to consumers and restaurant reservation management, as well as customer acquisition services to restaurants. Further, it offers travel insurance products. The company was formerly known as The Priceline Group Inc. and changed its name to Booking Holdings Inc. in February 2018. Booking Holdings Inc. was founded in 1997 and is headquartered in Norwalk, Connecticut.(Source : Finviz) . Revenue Drivers . Agency, mechant and advertising operations drive Bookings’ revenue. Their main source of revenue comes from acting as an online travel agency booking hotels, car rentals and restaurant reservations with commissions. Their second source derives from their role as a merchant, selling reservations at hotels, car rentals and restaurant reservations. Bookings also receives revenue from traditional advertising on it’s websites. . Sustainability and Governance . Yahoo ESG rating is 19/100, quantified using data of 120 environmental, social and governance indicators including: carbon emissions, climate change effect, pollution, waste disposal, renewable energy, resource depletion, supply chain, political contributions, discrimination, diversity, community relations, human rights, cumulative voting, executive compensation, shareholders’ rights, takeover defense, staggered boards, and independent directors. ESG rating will penalize companies for “missing data.” A low score signals less risk in governance and social environmental impact. The anti-competitive nature of Bookings signals its success as a capitalist company as much as their disrespect for fair play in markets.Business informs Bookings political opinions, evidenced by their support for illegal Israeli occupation of Palestine. . Risks . The nice thing about this idea is the company is experiencing a worst case scenario. Economic activity will grind to a halt, and revenues will be impacted. We expect our revenues to decline modestly, and the DCF models account for this in the 60% decline in topline built into the first year. One risk might be that recent events might change consumer behavior in the travel sector, and revenue streams might be dampened for the foreseeable future. Additionally, more than half of revenues are reservations and travel insurance, we could be too conservative, and large amounts of travel insurance claims might drain cash flows in ways our models do not anticipate. .",
            "url": "https://albisbub.github.io/RFIC-Pitches/bkng/",
            "relUrl": "/bkng/",
            "date": " • Apr 1, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://albisbub.github.io/RFIC-Pitches/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://albisbub.github.io/RFIC-Pitches/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}